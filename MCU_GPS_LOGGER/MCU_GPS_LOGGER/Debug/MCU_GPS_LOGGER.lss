
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2b  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000910  00000000  00000000  00001047  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065a  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d2  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000462  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 75 00 	call	0xea	; 0xea <main>
  78:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <EEPROM_write_byte>:
void EEPROM_write_word(uint32_t word, uint16_t address) {
	
}

// writes a word to next free location in EEPROM
void EEPROM_write_word_next_free(uint32_t word) {
  80:	f8 94       	cli
  82:	f9 99       	sbic	0x1f, 1	; 31
  84:	fe cf       	rjmp	.-4      	; 0x82 <EEPROM_write_byte+0x2>
  86:	97 b7       	in	r25, 0x37	; 55
  88:	72 bd       	out	0x22, r23	; 34
  8a:	61 bd       	out	0x21, r22	; 33
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	fa 9a       	sbi	0x1f, 2	; 31
  90:	f9 9a       	sbi	0x1f, 1	; 31
  92:	81 ee       	ldi	r24, 0xE1	; 225
  94:	94 e0       	ldi	r25, 0x04	; 4
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <EEPROM_write_byte+0x16>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <EEPROM_write_byte+0x1c>
  9c:	00 00       	nop
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <EEPROM_read_byte>:
	
}

uint8_t EEPROM_read_byte(uint16_t address) {
	cli();							// disable interrupts
  a2:	f8 94       	cli
	
	uint8_t byte = -1;
	
	while(EECR & (1 << EEPE));	// check that no one is writing data to EEPROM
  a4:	f9 99       	sbic	0x1f, 1	; 31
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <EEPROM_read_byte+0x2>
	
	EEAR = address;					// set address to read from
  a8:	92 bd       	out	0x22, r25	; 34
  aa:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);			// enable reading 
  ac:	f8 9a       	sbi	0x1f, 0	; 31
	
	byte = EEDR;
  ae:	80 b5       	in	r24, 0x20	; 32
	
	sei();							// enable interrupts
  b0:	78 94       	sei
	return byte;
}
  b2:	08 95       	ret

000000b4 <output>:
#include <avr/io.h>
#include <util/delay.h>
#include "USART.h"
#include "EEPROM.h"

void output(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	16 2f       	mov	r17, r22
  bc:	d4 2f       	mov	r29, r20
  be:	c2 2f       	mov	r28, r18
	USART_transmit_byte(a);
  c0:	0e 94 c2 00 	call	0x184	; 0x184 <USART_transmit_byte>
	USART_transmit_byte(b);
  c4:	81 2f       	mov	r24, r17
  c6:	0e 94 c2 00 	call	0x184	; 0x184 <USART_transmit_byte>
	USART_transmit_byte(c);
  ca:	8d 2f       	mov	r24, r29
  cc:	0e 94 c2 00 	call	0x184	; 0x184 <USART_transmit_byte>
	USART_transmit_byte(d);
  d0:	8c 2f       	mov	r24, r28
  d2:	0e 94 c2 00 	call	0x184	; 0x184 <USART_transmit_byte>
	USART_transmit_byte('\n');
  d6:	8a e0       	ldi	r24, 0x0A	; 10
  d8:	0e 94 c2 00 	call	0x184	; 0x184 <USART_transmit_byte>
	USART_transmit_byte('\r');
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	0e 94 c2 00 	call	0x184	; 0x184 <USART_transmit_byte>
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <main>:

int main(void)
{
    USART_init();
  ea:	0e 94 b1 00 	call	0x162	; 0x162 <USART_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	87 ea       	ldi	r24, 0xA7	; 167
  f0:	91 e6       	ldi	r25, 0x61	; 97
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x8>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0xe>
  f8:	00 00       	nop
	uint8_t b = 'b';
	uint8_t c = 'c';
	uint8_t d = 'd';
	
	_delay_ms(100);
	output(a, b, c, d);
  fa:	24 e6       	ldi	r18, 0x64	; 100
  fc:	43 e6       	ldi	r20, 0x63	; 99
  fe:	62 e6       	ldi	r22, 0x62	; 98
 100:	81 e6       	ldi	r24, 0x61	; 97
 102:	0e 94 5a 00 	call	0xb4	; 0xb4 <output>
	
	EEPROM_write_byte(a, 0x00);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	81 e6       	ldi	r24, 0x61	; 97
 10c:	0e 94 40 00 	call	0x80	; 0x80 <EEPROM_write_byte>
	EEPROM_write_byte(b, 0x01);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	82 e6       	ldi	r24, 0x62	; 98
 116:	0e 94 40 00 	call	0x80	; 0x80 <EEPROM_write_byte>
	EEPROM_write_byte(c, 0x02);
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	83 e6       	ldi	r24, 0x63	; 99
 120:	0e 94 40 00 	call	0x80	; 0x80 <EEPROM_write_byte>
	EEPROM_write_byte(d, 0x03);
 124:	63 e0       	ldi	r22, 0x03	; 3
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	0e 94 40 00 	call	0x80	; 0x80 <EEPROM_write_byte>
	
	a = EEPROM_read_byte(0x03);
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read_byte>
 136:	c8 2f       	mov	r28, r24
	b = EEPROM_read_byte(0x02);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read_byte>
 140:	d8 2f       	mov	r29, r24
	c = EEPROM_read_byte(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read_byte>
 14a:	18 2f       	mov	r17, r24
	d = EEPROM_read_byte(0x00);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read_byte>
	
	output(a, b, c, d);
 154:	28 2f       	mov	r18, r24
 156:	41 2f       	mov	r20, r17
 158:	6d 2f       	mov	r22, r29
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 5a 00 	call	0xb4	; 0xb4 <output>
 160:	ff cf       	rjmp	.-2      	; 0x160 <main+0x76>

00000162 <USART_init>:

#include "USART.h"

void USART_init()
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);		// enable TX and RX
 162:	88 e1       	ldi	r24, 0x18	; 24
 164:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);     // 8 data bits, 1 stop bit
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// Set baud to 9600
	UBRR0H = 0;                        
 16e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 12;
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Set baud to 9600
	
	UCSR0A |= (1 << U2X0);						// 2X speed
 178:	e0 ec       	ldi	r30, 0xC0	; 192
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <USART_transmit_byte>:
}

void USART_transmit_byte(uint8_t byte) {
	while(!(UCSR0A & (1 <<UDRE0)));	// wait until buffer is empty
 184:	e0 ec       	ldi	r30, 0xC0	; 192
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	90 81       	ld	r25, Z
 18a:	95 ff       	sbrs	r25, 5
 18c:	fd cf       	rjmp	.-6      	; 0x188 <USART_transmit_byte+0x4>
	UDR0 = byte;
 18e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
