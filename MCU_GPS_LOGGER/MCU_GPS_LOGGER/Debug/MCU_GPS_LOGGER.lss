
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  000002ee  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010fd  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000974  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000764  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000532  00000000  00000000  00002984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f6  00000000  00000000  00002eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3f       	cpi	r26, 0xFC	; 252
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  8e:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <EEPROM_read_byte>:
	for (uint8_t i = WORD-1; i < 255; i--)
	{	
		byte = (word >> (i * BYTE));			// take the 8 msb and store them at a time [1010101011111111] => [10101010] at address n, [11111111] at address n+1
		EEPROM_write_byte_next_free(byte);
	}
}
  96:	f8 94       	cli
  98:	f9 99       	sbic	0x1f, 1	; 31
  9a:	fe cf       	rjmp	.-4      	; 0x98 <EEPROM_read_byte+0x2>
  9c:	92 bd       	out	0x22, r25	; 34
  9e:	81 bd       	out	0x21, r24	; 33
  a0:	f8 9a       	sbi	0x1f, 0	; 31
  a2:	80 b5       	in	r24, 0x20	; 32
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <EEPROM_get_free_address>:
  a8:	cf 93       	push	r28
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
  b2:	c8 2f       	mov	r28, r24
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
  bc:	2c 2f       	mov	r18, r28
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	32 2f       	mov	r19, r18
  c2:	22 27       	eor	r18, r18
  c4:	a9 01       	movw	r20, r18
  c6:	48 2b       	or	r20, r24
  c8:	ca 01       	movw	r24, r20
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <EEPROM_set_free_address>:
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	d8 2f       	mov	r29, r24
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_get_free_address>
  d8:	c9 2f       	mov	r28, r25
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	8d 0f       	add	r24, r29
  e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <EEPROM_write_byte>:
  f4:	f8 94       	cli
  f6:	f9 99       	sbic	0x1f, 1	; 31
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <EEPROM_write_byte+0x2>
  fa:	97 b7       	in	r25, 0x37	; 55
  fc:	72 bd       	out	0x22, r23	; 34
  fe:	61 bd       	out	0x21, r22	; 33
 100:	80 bd       	out	0x20, r24	; 32
 102:	fa 9a       	sbi	0x1f, 2	; 31
 104:	f9 9a       	sbi	0x1f, 1	; 31
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <EEPROM_write_byte+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <EEPROM_write_byte+0x1c>
 110:	00 00       	nop
 112:	62 30       	cpi	r22, 0x02	; 2
 114:	71 05       	cpc	r23, r1
 116:	18 f0       	brcs	.+6      	; 0x11e <EEPROM_write_byte+0x2a>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_set_free_address>
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <EEPROM_write_byte_next_free>:
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_get_free_address>
 12a:	bc 01       	movw	r22, r24
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <EEPROM_clear>:
	EEPROM_write_byte(last_address_high, ADDRESS_HIGH_BYTE);
}

// !!!!!!!!!WARNING!!!!!!!!!!!!! Overwrites the entire EEPROM with zeros and resets next free memory location
// takes ~ 5ms/byte in EEPROM
void EEPROM_clear() {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	USART_transmit_string("CLEARING THE EEPROM. THIS MIGHT TAKE A WHILE!!!\n\r");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 66 01 	call	0x2cc	; 0x2cc <USART_transmit_string>
	for (int i = FIRST_DATA_BYTE; i < 12; i++)	// only erase 10 first bytes debuggmode
 142:	c2 e0       	ldi	r28, 0x02	; 2
 144:	d0 e0       	ldi	r29, 0x00	; 0
	{
		EEPROM_write_byte(0, i);
 146:	be 01       	movw	r22, r28
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>

// !!!!!!!!!WARNING!!!!!!!!!!!!! Overwrites the entire EEPROM with zeros and resets next free memory location
// takes ~ 5ms/byte in EEPROM
void EEPROM_clear() {
	USART_transmit_string("CLEARING THE EEPROM. THIS MIGHT TAKE A WHILE!!!\n\r");
	for (int i = FIRST_DATA_BYTE; i < 12; i++)	// only erase 10 first bytes debuggmode
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	cc 30       	cpi	r28, 0x0C	; 12
 152:	d1 05       	cpc	r29, r1
 154:	c1 f7       	brne	.-16     	; 0x146 <EEPROM_clear+0x10>
	{
		EEPROM_write_byte(0, i);
	}
	EEPROM_write_byte(0, ADDRESS_HIGH_BYTE);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
	EEPROM_write_byte(FIRST_DATA_BYTE, ADDRESS_LOW_BYTE);  // set the address of the first available byte as 2
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
	USART_transmit_string("\n\rEEPROM CLEARED!\n\r");
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 66 01 	call	0x2cc	; 0x2cc <USART_transmit_string>
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <output>:
		USART_transmit_byte(values[i] + '0');
	}
	USART_transmit_string("\n\r");
	USART_transmit_string("TEST COMPLETED: test_RW_word\n\n\r");
	
}
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	16 2f       	mov	r17, r22
 180:	d4 2f       	mov	r29, r20
 182:	c2 2f       	mov	r28, r18
 184:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_transmit_byte>
 188:	81 2f       	mov	r24, r17
 18a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_transmit_byte>
 18e:	8d 2f       	mov	r24, r29
 190:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_transmit_byte>
 194:	8c 2f       	mov	r24, r28
 196:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_transmit_byte>
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_transmit_byte>
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_transmit_byte>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	08 95       	ret

000001ae <test_RW_byte>:
void test_RW_byte() {
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
	
	USART_transmit_string("TESTING: test_RW_byte\n\r");
 1b6:	85 e9       	ldi	r24, 0x95	; 149
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <USART_transmit_string>
	uint8_t a = '1';
	uint8_t b = '2';
	uint8_t c = '3';
	uint8_t d = '4';
	
	USART_transmit_string("Expected output 1234: ");
 1be:	8e e5       	ldi	r24, 0x5E	; 94
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <USART_transmit_string>
	output(a, b, c, d);
 1c6:	24 e3       	ldi	r18, 0x34	; 52
 1c8:	43 e3       	ldi	r20, 0x33	; 51
 1ca:	62 e3       	ldi	r22, 0x32	; 50
 1cc:	81 e3       	ldi	r24, 0x31	; 49
 1ce:	0e 94 bc 00 	call	0x178	; 0x178 <output>
	
	EEPROM_write_byte_next_free(a);
 1d2:	81 e3       	ldi	r24, 0x31	; 49
 1d4:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free(b);
 1d8:	82 e3       	ldi	r24, 0x32	; 50
 1da:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free(c);
 1de:	83 e3       	ldi	r24, 0x33	; 51
 1e0:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free(d);
 1e4:	84 e3       	ldi	r24, 0x34	; 52
 1e6:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	
	a = EEPROM_read_byte(0x05);
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 1f2:	c8 2f       	mov	r28, r24
	b = EEPROM_read_byte(0x04);
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 1fc:	d8 2f       	mov	r29, r24
	c = EEPROM_read_byte(0x03);
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 206:	18 2f       	mov	r17, r24
	d = EEPROM_read_byte(0x02);
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 210:	08 2f       	mov	r16, r24
	
	USART_transmit_string("Expected output 4321: ");
 212:	8d ea       	ldi	r24, 0xAD	; 173
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 66 01 	call	0x2cc	; 0x2cc <USART_transmit_string>
	output(a, b, c, d);
 21a:	20 2f       	mov	r18, r16
 21c:	41 2f       	mov	r20, r17
 21e:	6d 2f       	mov	r22, r29
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 bc 00 	call	0x178	; 0x178 <output>
	
	EEPROM_write_byte_next_free('a');
 226:	81 e6       	ldi	r24, 0x61	; 97
 228:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free('b');
 22c:	82 e6       	ldi	r24, 0x62	; 98
 22e:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free('c');
 232:	83 e6       	ldi	r24, 0x63	; 99
 234:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free('d');
 238:	84 e6       	ldi	r24, 0x64	; 100
 23a:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
	
	a = EEPROM_read_byte(0x09);
 23e:	89 e0       	ldi	r24, 0x09	; 9
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 246:	c8 2f       	mov	r28, r24
	b = EEPROM_read_byte(0x08);
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 250:	d8 2f       	mov	r29, r24
	c = EEPROM_read_byte(0x07);
 252:	87 e0       	ldi	r24, 0x07	; 7
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 25a:	18 2f       	mov	r17, r24
	d = EEPROM_read_byte(0x06);
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 264:	08 2f       	mov	r16, r24
		
	USART_transmit_string("Expected output dcba: ");
 266:	84 ec       	ldi	r24, 0xC4	; 196
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 66 01 	call	0x2cc	; 0x2cc <USART_transmit_string>
	output(a, b, c, d);
 26e:	20 2f       	mov	r18, r16
 270:	41 2f       	mov	r20, r17
 272:	6d 2f       	mov	r22, r29
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 bc 00 	call	0x178	; 0x178 <output>
	USART_transmit_string("TEST COMPLETED: test_RW_byte\n\n\r");
 27a:	8b ed       	ldi	r24, 0xDB	; 219
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 66 01 	call	0x2cc	; 0x2cc <USART_transmit_string>
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <main>:
void test_RW_byte();
void test_RW_word();

int main(void)
{
    USART_init();
 28c:	0e 94 4d 01 	call	0x29a	; 0x29a <USART_init>
	
	EEPROM_clear();
 290:	0e 94 9b 00 	call	0x136	; 0x136 <EEPROM_clear>
	
	
	// can only run one test at the time since they will use same address-space
	//test_RW_word();
	test_RW_byte();
 294:	0e 94 d7 00 	call	0x1ae	; 0x1ae <test_RW_byte>
 298:	ff cf       	rjmp	.-2      	; 0x298 <main+0xc>

0000029a <USART_init>:

#include "USART.h"

void USART_init()
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);		// enable TX and RX
 29a:	88 e1       	ldi	r24, 0x18	; 24
 29c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);     // 8 data bits, 1 stop bit
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// Set baud to 9600
	UBRR0H = 0;                        
 2a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 12;
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Set baud to 9600
	
	UCSR0A |= (1 << U2X0);						// 2X speed
 2b0:	e0 ec       	ldi	r30, 0xC0	; 192
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	80 83       	st	Z, r24
 2ba:	08 95       	ret

000002bc <USART_transmit_byte>:
}

void USART_transmit_byte(uint8_t byte) {
	while(!(UCSR0A & (1 <<UDRE0)));	// wait until buffer is empty
 2bc:	e0 ec       	ldi	r30, 0xC0	; 192
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	90 81       	ld	r25, Z
 2c2:	95 ff       	sbrs	r25, 5
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <USART_transmit_byte+0x4>
	UDR0 = byte;
 2c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ca:	08 95       	ret

000002cc <USART_transmit_string>:
}

void USART_transmit_string(char *data) {
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
	int i = 0;
	
	while(data[i]) {
 2d2:	88 81       	ld	r24, Y
 2d4:	88 23       	and	r24, r24
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <USART_transmit_string+0x18>
 2d8:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit_byte(data[i]);
 2da:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_transmit_byte>
}

void USART_transmit_string(char *data) {
	int i = 0;
	
	while(data[i]) {
 2de:	89 91       	ld	r24, Y+
 2e0:	81 11       	cpse	r24, r1
 2e2:	fb cf       	rjmp	.-10     	; 0x2da <USART_transmit_string+0xe>
		USART_transmit_byte(data[i]);
		i++;
	}
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
