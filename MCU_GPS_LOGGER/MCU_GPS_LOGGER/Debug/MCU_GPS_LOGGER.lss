
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af1  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000452  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041a  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d9  00000000  00000000  0000202a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3c       	cpi	r26, 0xC4	; 196
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8e:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <test_TX_binary>:
    }
	return 0;
}

void test_TX_binary() {
	USART_transmit_string("TESTING: test_TX_binary\n\r");
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	uint8_t a = 0b11111111;
	uint8_t b = 0b00000000;
	uint8_t c = 0b01010101;
	uint8_t d = 0b10101010;
	
	USART_transmit_string("Expected output 0b11111111, got: ");
  9e:	8a e1       	ldi	r24, 0x1A	; 26
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	USART_transmit_binary(a);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	0e 94 af 00 	call	0x15e	; 0x15e <USART_transmit_binary>
	USART_transmit_string("\n\r");
  ac:	8e eb       	ldi	r24, 0xBE	; 190
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b00000000, got ");
  b4:	8c e3       	ldi	r24, 0x3C	; 60
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	USART_transmit_binary(b);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 af 00 	call	0x15e	; 0x15e <USART_transmit_binary>
	USART_transmit_string("\n\r");
  c2:	8e eb       	ldi	r24, 0xBE	; 190
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b01010101, got ");
  ca:	8d e5       	ldi	r24, 0x5D	; 93
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	USART_transmit_binary(c);
  d2:	85 e5       	ldi	r24, 0x55	; 85
  d4:	0e 94 af 00 	call	0x15e	; 0x15e <USART_transmit_binary>
	USART_transmit_string("\n\r");
  d8:	8e eb       	ldi	r24, 0xBE	; 190
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b10101010, got ");
  e0:	8e e7       	ldi	r24, 0x7E	; 126
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	USART_transmit_binary(d);
  e8:	8a ea       	ldi	r24, 0xAA	; 170
  ea:	0e 94 af 00 	call	0x15e	; 0x15e <USART_transmit_binary>
	USART_transmit_string("\n\r");
  ee:	8e eb       	ldi	r24, 0xBE	; 190
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	
	USART_transmit_string("TEST COMPLETED: test_TX_binary\n\n\r");
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
  fe:	08 95       	ret

00000100 <main>:



int main(void)
{
    USART_init();
 100:	0e 94 87 00 	call	0x10e	; 0x10e <USART_init>
	
	USART_clear_putty();
 104:	0e 94 cf 00 	call	0x19e	; 0x19e <USART_clear_putty>
	test_TX_binary();
 108:	0e 94 4b 00 	call	0x96	; 0x96 <test_TX_binary>
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0xc>

0000010e <USART_init>:
			buf[i + 1] = '\0';
			break;
		}
	}
	
}
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 11a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 124:	e0 ec       	ldi	r30, 0xC0	; 192
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <USART_transmit_byte>:
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	95 ff       	sbrs	r25, 5
 138:	fd cf       	rjmp	.-6      	; 0x134 <USART_transmit_byte+0x4>
 13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13e:	08 95       	ret

00000140 <USART_transmit_string>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	88 81       	ld	r24, Y
 148:	88 23       	and	r24, r24
 14a:	31 f0       	breq	.+12     	; 0x158 <USART_transmit_string+0x18>
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	0e 94 98 00 	call	0x130	; 0x130 <USART_transmit_byte>
 152:	89 91       	ld	r24, Y+
 154:	81 11       	cpse	r24, r1
 156:	fb cf       	rjmp	.-10     	; 0x14e <USART_transmit_string+0xe>
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <USART_transmit_binary>:

void USART_transmit_binary(uint8_t byte) {
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	08 2f       	mov	r16, r24
	USART_transmit_string("0b");
 166:	81 ec       	ldi	r24, 0xC1	; 193
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 a0 00 	call	0x140	; 0x140 <USART_transmit_string>
	
	for (uint8_t i = BYTE - 1; i < 255; i--)
 16e:	c7 e0       	ldi	r28, 0x07	; 7
	{
		if (byte & (1 << i)) {
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	98 01       	movw	r18, r16
 174:	0c 2e       	mov	r0, r28
 176:	02 c0       	rjmp	.+4      	; 0x17c <USART_transmit_binary+0x1e>
 178:	35 95       	asr	r19
 17a:	27 95       	ror	r18
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <USART_transmit_binary+0x1a>
 180:	20 ff       	sbrs	r18, 0
 182:	04 c0       	rjmp	.+8      	; 0x18c <USART_transmit_binary+0x2e>
			USART_transmit_byte('1');
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	0e 94 98 00 	call	0x130	; 0x130 <USART_transmit_byte>
 18a:	03 c0       	rjmp	.+6      	; 0x192 <USART_transmit_binary+0x34>
		} else {
			USART_transmit_byte('0');
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	0e 94 98 00 	call	0x130	; 0x130 <USART_transmit_byte>
}

void USART_transmit_binary(uint8_t byte) {
	USART_transmit_string("0b");
	
	for (uint8_t i = BYTE - 1; i < 255; i--)
 192:	c1 50       	subi	r28, 0x01	; 1
 194:	70 f7       	brcc	.-36     	; 0x172 <USART_transmit_binary+0x14>
			USART_transmit_byte('1');
		} else {
			USART_transmit_byte('0');
		}
	}
}
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <USART_clear_putty>:

void USART_clear_putty() {
 19e:	cf 93       	push	r28
 1a0:	c4 e1       	ldi	r28, 0x14	; 20
	for (uint8_t i = 0; i < 20; i++)
	{
		USART_transmit_byte('\n');
 1a2:	8a e0       	ldi	r24, 0x0A	; 10
 1a4:	0e 94 98 00 	call	0x130	; 0x130 <USART_transmit_byte>
 1a8:	c1 50       	subi	r28, 0x01	; 1
		}
	}
}

void USART_clear_putty() {
	for (uint8_t i = 0; i < 20; i++)
 1aa:	d9 f7       	brne	.-10     	; 0x1a2 <USART_clear_putty+0x4>
	{
		USART_transmit_byte('\n');
	}
	USART_transmit_byte('\r');
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	0e 94 98 00 	call	0x130	; 0x130 <USART_transmit_byte>
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
