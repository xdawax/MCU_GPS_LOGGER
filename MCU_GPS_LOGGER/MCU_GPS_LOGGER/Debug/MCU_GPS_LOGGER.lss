
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e00  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060d  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fc  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b9  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  8e:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <print_struct>:
	EEPROM_write_byte_next_free(gps_data->day);
	EEPROM_write_byte_next_free(gps_data->hour);
	EEPROM_write_byte_next_free(gps_data->minute);
}

void print_struct(gps_t *gps_data) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
	USART_transmit_string("\n\r########### GPS DATA ###########");
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
	USART_transmit_string("\n\rLattitude: ");
  a4:	83 e2       	ldi	r24, 0x23	; 35
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
	USART_transmit_word(gps_data->lattitude);
  ac:	68 81       	ld	r22, Y
  ae:	79 81       	ldd	r23, Y+1	; 0x01
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	9b 81       	ldd	r25, Y+3	; 0x03
  b4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_transmit_word>
	
	USART_transmit_string("\n\rLongitude: ");
  b8:	81 e3       	ldi	r24, 0x31	; 49
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
	USART_transmit_word(gps_data->longitude);
  c0:	6c 81       	ldd	r22, Y+4	; 0x04
  c2:	7d 81       	ldd	r23, Y+5	; 0x05
  c4:	8e 81       	ldd	r24, Y+6	; 0x06
  c6:	9f 81       	ldd	r25, Y+7	; 0x07
  c8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_transmit_word>
	
	USART_transmit_string("\n\rMonth: ");
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
	USART_transmit_byte(gps_data->month + '0');
  d4:	88 85       	ldd	r24, Y+8	; 0x08
  d6:	80 5d       	subi	r24, 0xD0	; 208
  d8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
	
	USART_transmit_string("\n\rDay: ");
  dc:	89 e4       	ldi	r24, 0x49	; 73
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
	USART_transmit_byte(gps_data->day + '0');
  e4:	89 85       	ldd	r24, Y+9	; 0x09
  e6:	80 5d       	subi	r24, 0xD0	; 208
  e8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
	
	USART_transmit_string("\n\rHour: ");
  ec:	81 e5       	ldi	r24, 0x51	; 81
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
	USART_transmit_byte(gps_data->hour + '0');
  f4:	8a 85       	ldd	r24, Y+10	; 0x0a
  f6:	80 5d       	subi	r24, 0xD0	; 208
  f8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
	
	USART_transmit_string("\n\rMinute: ");
  fc:	8a e5       	ldi	r24, 0x5A	; 90
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
	USART_transmit_byte(gps_data->minute + '0');
 104:	8b 85       	ldd	r24, Y+11	; 0x0b
 106:	80 5d       	subi	r24, 0xD0	; 208
 108:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
	USART_transmit_string("\n\r");
 10c:	85 e6       	ldi	r24, 0x65	; 101
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_transmit_string>
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <init_structs>:
    {	
		
    }
	return 0;
}
void init_structs(gps_t *gps1) {
 11a:	fc 01       	movw	r30, r24
		gps1->lattitude = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	80 83       	st	Z, r24
 126:	91 83       	std	Z+1, r25	; 0x01
 128:	a2 83       	std	Z+2, r26	; 0x02
 12a:	b3 83       	std	Z+3, r27	; 0x03
		gps1->longitude = 2;
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	84 83       	std	Z+4, r24	; 0x04
 136:	95 83       	std	Z+5, r25	; 0x05
 138:	a6 83       	std	Z+6, r26	; 0x06
 13a:	b7 83       	std	Z+7, r27	; 0x07
		gps1->month = 3;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 87       	std	Z+8, r24	; 0x08
		gps1->day = 4;
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	81 87       	std	Z+9, r24	; 0x09
		gps1->hour = 5;
 144:	85 e0       	ldi	r24, 0x05	; 5
 146:	82 87       	std	Z+10, r24	; 0x0a
		gps1->minute = 6;
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	83 87       	std	Z+11, r24	; 0x0b
 14c:	08 95       	ret

0000014e <main>:
{
    gps_t *gps1 = NULL;
	gps_t *gps2 = NULL;
	gps_t *temp = NULL;
	
	USART_init();
 14e:	0e 94 b4 00 	call	0x168	; 0x168 <USART_init>
	USART_clear_putty();
 152:	0e 94 2f 01 	call	0x25e	; 0x25e <USART_clear_putty>
	
	init_structs(gps1);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 8d 00 	call	0x11a	; 0x11a <init_structs>
	
	print_struct(gps1);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 4b 00 	call	0x96	; 0x96 <print_struct>
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x18>

00000168 <USART_init>:
			USART_transmit_byte('1');
		} else {
			USART_transmit_byte('0');
		}
	}
}
 168:	88 e1       	ldi	r24, 0x18	; 24
 16a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 174:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 17e:	e0 ec       	ldi	r30, 0xC0	; 192
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <USART_transmit_byte>:
 18a:	e0 ec       	ldi	r30, 0xC0	; 192
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	90 81       	ld	r25, Z
 190:	95 ff       	sbrs	r25, 5
 192:	fd cf       	rjmp	.-6      	; 0x18e <USART_transmit_byte+0x4>
 194:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 198:	08 95       	ret

0000019a <USART_transmit_string>:
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	88 81       	ld	r24, Y
 1a2:	88 23       	and	r24, r24
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <USART_transmit_string+0x18>
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
 1ac:	89 91       	ld	r24, Y+
 1ae:	81 11       	cpse	r24, r1
 1b0:	fb cf       	rjmp	.-10     	; 0x1a8 <USART_transmit_string+0xe>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <USART_transmit_word>:

void USART_transmit_word(uint32_t word) {
 1b8:	4f 92       	push	r4
 1ba:	5f 92       	push	r5
 1bc:	6f 92       	push	r6
 1be:	7f 92       	push	r7
 1c0:	8f 92       	push	r8
 1c2:	9f 92       	push	r9
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	2b 01       	movw	r4, r22
 1d6:	3c 01       	movw	r6, r24
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	3a ec       	ldi	r19, 0xCA	; 202
 1dc:	4a e9       	ldi	r20, 0x9A	; 154
 1de:	5b e3       	ldi	r21, 0x3B	; 59
 1e0:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodsi4>
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	82 0f       	add	r24, r18
 1e8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
 1ec:	c9 e0       	ldi	r28, 0x09	; 9
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;
 1f0:	0f 2e       	mov	r0, r31
 1f2:	c1 2c       	mov	r12, r1
 1f4:	fa ec       	ldi	r31, 0xCA	; 202
 1f6:	df 2e       	mov	r13, r31
 1f8:	fa e9       	ldi	r31, 0x9A	; 154
 1fa:	ef 2e       	mov	r14, r31
 1fc:	fb e3       	ldi	r31, 0x3B	; 59
 1fe:	ff 2e       	mov	r15, r31
 200:	f0 2d       	mov	r31, r0

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
		divisor = divisor / 10;
 202:	0f 2e       	mov	r0, r31
 204:	fa e0       	ldi	r31, 0x0A	; 10
 206:	8f 2e       	mov	r8, r31
 208:	91 2c       	mov	r9, r1
 20a:	a1 2c       	mov	r10, r1
 20c:	b1 2c       	mov	r11, r1
 20e:	f0 2d       	mov	r31, r0
 210:	c7 01       	movw	r24, r14
 212:	b6 01       	movw	r22, r12
 214:	a5 01       	movw	r20, r10
 216:	94 01       	movw	r18, r8
 218:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodsi4>
 21c:	69 01       	movw	r12, r18
 21e:	7a 01       	movw	r14, r20
		USART_transmit_byte(((word / divisor) % 10) + '0');
 220:	c3 01       	movw	r24, r6
 222:	b2 01       	movw	r22, r4
 224:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodsi4>
 228:	ca 01       	movw	r24, r20
 22a:	b9 01       	movw	r22, r18
 22c:	a5 01       	movw	r20, r10
 22e:	94 01       	movw	r18, r8
 230:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodsi4>
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	86 0f       	add	r24, r22
 238:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
 23c:	21 97       	sbiw	r28, 0x01	; 1
void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
 23e:	41 f7       	brne	.-48     	; 0x210 <USART_transmit_word+0x58>
		divisor = divisor / 10;
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	08 95       	ret

0000025e <USART_clear_putty>:

void USART_clear_putty() {
 25e:	cf 93       	push	r28
 260:	c4 e1       	ldi	r28, 0x14	; 20
	for (uint8_t i = 0; i < 20; i++)
	{
		USART_transmit_byte('\n');
 262:	8a e0       	ldi	r24, 0x0A	; 10
 264:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
 268:	c1 50       	subi	r28, 0x01	; 1
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}

void USART_clear_putty() {
	for (uint8_t i = 0; i < 20; i++)
 26a:	d9 f7       	brne	.-10     	; 0x262 <USART_clear_putty+0x4>
	{
		USART_transmit_byte('\n');
	}
	USART_transmit_byte('\r');
 26c:	8d e0       	ldi	r24, 0x0D	; 13
 26e:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_transmit_byte>
}
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <__udivmodsi4>:
 276:	a1 e2       	ldi	r26, 0x21	; 33
 278:	1a 2e       	mov	r1, r26
 27a:	aa 1b       	sub	r26, r26
 27c:	bb 1b       	sub	r27, r27
 27e:	fd 01       	movw	r30, r26
 280:	0d c0       	rjmp	.+26     	; 0x29c <__udivmodsi4_ep>

00000282 <__udivmodsi4_loop>:
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	ee 1f       	adc	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	a2 17       	cp	r26, r18
 28c:	b3 07       	cpc	r27, r19
 28e:	e4 07       	cpc	r30, r20
 290:	f5 07       	cpc	r31, r21
 292:	20 f0       	brcs	.+8      	; 0x29c <__udivmodsi4_ep>
 294:	a2 1b       	sub	r26, r18
 296:	b3 0b       	sbc	r27, r19
 298:	e4 0b       	sbc	r30, r20
 29a:	f5 0b       	sbc	r31, r21

0000029c <__udivmodsi4_ep>:
 29c:	66 1f       	adc	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	1a 94       	dec	r1
 2a6:	69 f7       	brne	.-38     	; 0x282 <__udivmodsi4_loop>
 2a8:	60 95       	com	r22
 2aa:	70 95       	com	r23
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	bd 01       	movw	r22, r26
 2b6:	cf 01       	movw	r24, r30
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
