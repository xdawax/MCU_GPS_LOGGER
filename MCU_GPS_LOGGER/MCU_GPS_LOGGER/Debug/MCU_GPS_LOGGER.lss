
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  0000030a  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001487  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a2d  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000912  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b3  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bfe  00000000  00000000  000036df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000042dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  8e:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <EEPROM_read_byte>:
		EEPROM_write_byte_next_free(byte);
	}
}

uint8_t EEPROM_read_byte(uint16_t address) {
	cli();							// disable interrupts
  96:	f8 94       	cli
	
	uint8_t byte = 0;
	
	while(EECR & (1 << EEPE));	// check that no one is writing data to EEPROM
  98:	f9 99       	sbic	0x1f, 1	; 31
  9a:	fe cf       	rjmp	.-4      	; 0x98 <EEPROM_read_byte+0x2>
	
	EEAR = address;					// set address to read from
  9c:	92 bd       	out	0x22, r25	; 34
  9e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);			// enable reading 
  a0:	f8 9a       	sbi	0x1f, 0	; 31
	
	byte = EEDR;
  a2:	80 b5       	in	r24, 0x20	; 32
	
	sei();							// enable interrupts
  a4:	78 94       	sei

	return byte;
}
  a6:	08 95       	ret

000000a8 <EEPROM_read_word>:

// reads 4 byte from memory starting at address and returns it
uint32_t EEPROM_read_word(uint16_t address){
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	8c 01       	movw	r16, r24
  ba:	c8 e1       	ldi	r28, 0x18	; 24
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t byte = 0;
	uint32_t word = 0;
  be:	c1 2c       	mov	r12, r1
  c0:	d1 2c       	mov	r13, r1
  c2:	76 01       	movw	r14, r12
	
	for (uint8_t i = 0; i < WORD; i++)
	{
		byte = EEPROM_read_byte(address + i);
  c4:	c8 01       	movw	r24, r16
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
		word |= (byte << (WORD - i - 1) * BYTE);
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	0c 2e       	mov	r0, r28
  d2:	04 c0       	rjmp	.+8      	; 0xdc <EEPROM_read_word+0x34>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	aa 1f       	adc	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	0a 94       	dec	r0
  de:	d2 f7       	brpl	.-12     	; 0xd4 <EEPROM_read_word+0x2c>
  e0:	c8 2a       	or	r12, r24
  e2:	d9 2a       	or	r13, r25
  e4:	ea 2a       	or	r14, r26
  e6:	fb 2a       	or	r15, r27
  e8:	0f 5f       	subi	r16, 0xFF	; 255
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	28 97       	sbiw	r28, 0x08	; 8
// reads 4 byte from memory starting at address and returns it
uint32_t EEPROM_read_word(uint16_t address){
	uint32_t byte = 0;
	uint32_t word = 0;
	
	for (uint8_t i = 0; i < WORD; i++)
  ee:	c8 3f       	cpi	r28, 0xF8	; 248
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	d8 07       	cpc	r29, r24
  f4:	39 f7       	brne	.-50     	; 0xc4 <EEPROM_read_word+0x1c>
		byte = EEPROM_read_byte(address + i);
		word |= (byte << (WORD - i - 1) * BYTE);
	}
	
	return word;
}
  f6:	c7 01       	movw	r24, r14
  f8:	b6 01       	movw	r22, r12
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	df 90       	pop	r13
 108:	cf 90       	pop	r12
 10a:	08 95       	ret

0000010c <EEPROM_get_free_address>:

// gives the address of the next free byte [xxxxx(address)--------]
// this is stored in the first 2 bytes of EEPROM memory
uint16_t EEPROM_get_free_address() {
 10c:	cf 93       	push	r28
	uint16_t address = 0;
	address |= (EEPROM_read_byte(ADDRESS_HIGH_BYTE) << BYTE);	// set the 8 msb as the address high bits
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 116:	c8 2f       	mov	r28, r24
	address |= EEPROM_read_byte(ADDRESS_LOW_BYTE);				// set the 8 lsb as the address high bits
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
	return address;
 120:	2c 2f       	mov	r18, r28
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	32 2f       	mov	r19, r18
 126:	22 27       	eor	r18, r18
}
 128:	a9 01       	movw	r20, r18
 12a:	48 2b       	or	r20, r24
 12c:	ca 01       	movw	r24, r20
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <EEPROM_set_free_address>:

// updates the free address to the next free byte using the size of last written data
void EEPROM_set_free_address(uint8_t size) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	c8 2f       	mov	r28, r24
	uint16_t last_address = EEPROM_get_free_address();
 138:	0e 94 86 00 	call	0x10c	; 0x10c <EEPROM_get_free_address>
	last_address += size;
 13c:	8c 0f       	add	r24, r28
 13e:	91 1d       	adc	r25, r1
 140:	ec 01       	movw	r28, r24
	uint8_t last_address_low = last_address;			// set 8 lsb, 
	uint8_t last_address_high = (last_address >> BYTE);		// set 8 msb
	EEPROM_write_byte(last_address_low, ADDRESS_LOW_BYTE);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
	EEPROM_write_byte(last_address_high, ADDRESS_HIGH_BYTE);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	8d 2f       	mov	r24, r29
 150:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <EEPROM_write_byte>:
void EEPROM_set_free_address(uint8_t size);


// automatically set to atomically RW
void EEPROM_write_byte(uint8_t byte, uint16_t address) {
	cli();								// disable interrupts so we don't get interrupted between seting the master write and write
 15a:	f8 94       	cli
	while(EECR & (1 << EEPE));			// wait until previous write is completed
 15c:	f9 99       	sbic	0x1f, 1	; 31
 15e:	fe cf       	rjmp	.-4      	; 0x15c <EEPROM_write_byte+0x2>
	while(SELFPRGEN & (1 << SPMCSR));
 160:	97 b7       	in	r25, 0x37	; 55
	
	EEAR = address;		// write address into address register
 162:	72 bd       	out	0x22, r23	; 34
 164:	61 bd       	out	0x21, r22	; 33
	EEDR = byte;		// write data into data register
 166:	80 bd       	out	0x20, r24	; 32
	EECR |= (1 << EEMPE);	// set Master Write Enable
 168:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1 << EEPE);	// within 4 clock cycles enable write
 16a:	f9 9a       	sbi	0x1f, 1	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	81 ee       	ldi	r24, 0xE1	; 225
 16e:	94 e0       	ldi	r25, 0x04	; 4
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <EEPROM_write_byte+0x16>
 174:	00 c0       	rjmp	.+0      	; 0x176 <EEPROM_write_byte+0x1c>
 176:	00 00       	nop
	_delay_ms(5);			// write takes about 3-4 ms, R.I.P Run In Peace
	
	if (address >= FIRST_DATA_BYTE) {
 178:	64 30       	cpi	r22, 0x04	; 4
 17a:	71 05       	cpc	r23, r1
 17c:	18 f0       	brcs	.+6      	; 0x184 <EEPROM_write_byte+0x2a>
		EEPROM_set_free_address(1);	// stepping one byte at the time
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 99 00 	call	0x132	; 0x132 <EEPROM_set_free_address>
	}
	sei();								// enable the interrupts
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <EEPROM_write_byte_next_free>:
}

void EEPROM_write_byte_next_free(uint8_t byte) {
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
	uint16_t address = EEPROM_get_free_address();
 18c:	0e 94 86 00 	call	0x10c	; 0x10c <EEPROM_get_free_address>
	EEPROM_write_byte(byte, address);
 190:	bc 01       	movw	r22, r24
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <EEPROM_write_word_next_free>:

// writes a word to next free location in EEPROM
void EEPROM_write_word_next_free(uint32_t word) {
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	cf 93       	push	r28
 1a6:	6b 01       	movw	r12, r22
 1a8:	7c 01       	movw	r14, r24
	
	uint8_t byte = 0;
	
	for (uint8_t i = WORD-1; i < 255; i--)
 1aa:	c3 e0       	ldi	r28, 0x03	; 3
	{	
		byte = (word >> (i * BYTE));			// take the 8 msb and store them at a time [1010101011111111] => [10101010] at address n, [11111111] at address n+1
		EEPROM_write_byte_next_free(byte);
 1ac:	8c 2f       	mov	r24, r28
 1ae:	88 0f       	add	r24, r24
 1b0:	88 0f       	add	r24, r24
 1b2:	88 0f       	add	r24, r24
 1b4:	a7 01       	movw	r20, r14
 1b6:	96 01       	movw	r18, r12
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <EEPROM_write_word_next_free+0x26>
 1ba:	56 95       	lsr	r21
 1bc:	47 95       	ror	r20
 1be:	37 95       	ror	r19
 1c0:	27 95       	ror	r18
 1c2:	8a 95       	dec	r24
 1c4:	d2 f7       	brpl	.-12     	; 0x1ba <EEPROM_write_word_next_free+0x1e>
 1c6:	da 01       	movw	r26, r20
 1c8:	c9 01       	movw	r24, r18
 1ca:	0e 94 c4 00 	call	0x188	; 0x188 <EEPROM_write_byte_next_free>
// writes a word to next free location in EEPROM
void EEPROM_write_word_next_free(uint32_t word) {
	
	uint8_t byte = 0;
	
	for (uint8_t i = WORD-1; i < 255; i--)
 1ce:	c1 50       	subi	r28, 0x01	; 1
 1d0:	68 f7       	brcc	.-38     	; 0x1ac <EEPROM_write_word_next_free+0x10>
	{	
		byte = (word >> (i * BYTE));			// take the 8 msb and store them at a time [1010101011111111] => [10101010] at address n, [11111111] at address n+1
		EEPROM_write_byte_next_free(byte);
	}
}
 1d2:	cf 91       	pop	r28
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <EEPROM_reset_header>:
	EEPROM_reset_header();
	USART_transmit_string("EEPROM CLEARED!\n\n\r");
}

void EEPROM_reset_header() {
	USART_transmit_string("RESETING THE HEADER\n\r");
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
	EEPROM_write_byte(0, ADDRESS_HIGH_BYTE);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
	EEPROM_write_byte(FIRST_DATA_BYTE, ADDRESS_LOW_BYTE);  // set the address of the first available byte as 2
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
	EEPROM_write_byte(0, ADDRESS_INDEX);				   // set the amount of stored structs to 0
 1fa:	63 e0       	ldi	r22, 0x03	; 3
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
	USART_transmit_string("HEADER RESET\n\n\r");
 204:	86 e1       	ldi	r24, 0x16	; 22
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
 20c:	08 95       	ret

0000020e <test_RW_word>:
	USART_transmit_byte(d);
	USART_transmit_byte('\n');
	USART_transmit_byte('\r');
}

void test_RW_word() {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
	USART_transmit_string("TESTING: test_RW_word\n\r");
 212:	8b e6       	ldi	r24, 0x6B	; 107
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
	uint8_t values[4] = {0,0,0,0};
	
	uint32_t word = 0b00000001000000100000001100000100;  // [1,2,3,4] as seperate bytes
	
	USART_transmit_string("Expected output 1234: ");
 21a:	83 e8       	ldi	r24, 0x83	; 131
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
	EEPROM_write_word_next_free(word);
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	73 e0       	ldi	r23, 0x03	; 3
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 ce 00 	call	0x19c	; 0x19c <EEPROM_write_word_next_free>
	
	for (int i = FIRST_DATA_BYTE; i < FIRST_DATA_BYTE + 4; i++)
 22e:	c4 e0       	ldi	r28, 0x04	; 4
 230:	d0 e0       	ldi	r29, 0x00	; 0
	{
		values[i] = EEPROM_read_byte(i);
 232:	ce 01       	movw	r24, r28
 234:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
		USART_transmit_byte(values[i] + '0');
 238:	80 5d       	subi	r24, 0xD0	; 208
 23a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_transmit_byte>
	uint32_t word = 0b00000001000000100000001100000100;  // [1,2,3,4] as seperate bytes
	
	USART_transmit_string("Expected output 1234: ");
	EEPROM_write_word_next_free(word);
	
	for (int i = FIRST_DATA_BYTE; i < FIRST_DATA_BYTE + 4; i++)
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	c8 30       	cpi	r28, 0x08	; 8
 242:	d1 05       	cpc	r29, r1
 244:	b1 f7       	brne	.-20     	; 0x232 <test_RW_word+0x24>
	{
		values[i] = EEPROM_read_byte(i);
		USART_transmit_byte(values[i] + '0');
	}
	USART_transmit_string("\n\r");
 246:	88 e6       	ldi	r24, 0x68	; 104
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
	
	uint32_t read_word = EEPROM_read_word(FIRST_DATA_BYTE);
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_read_word>
	if (read_word == word) {
 256:	64 30       	cpi	r22, 0x04	; 4
 258:	73 40       	sbci	r23, 0x03	; 3
 25a:	82 40       	sbci	r24, 0x02	; 2
 25c:	91 40       	sbci	r25, 0x01	; 1
 25e:	29 f4       	brne	.+10     	; 0x26a <test_RW_word+0x5c>
		USART_transmit_string("READING WORD: SUCCESS\n\r");
 260:	8a e9       	ldi	r24, 0x9A	; 154
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
 268:	18 c0       	rjmp	.+48     	; 0x29a <test_RW_word+0x8c>
	} else {
		USART_transmit_string("READING WORD: FAILURE\n\r");
 26a:	82 eb       	ldi	r24, 0xB2	; 178
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
		USART_transmit_string("GOT: ");
 272:	8a ec       	ldi	r24, 0xCA	; 202
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
		for (int i = FIRST_DATA_BYTE; i < FIRST_DATA_BYTE + 4; i++)
 27a:	c4 e0       	ldi	r28, 0x04	; 4
 27c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			values[i] = EEPROM_read_byte(i);
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
			USART_transmit_byte(values[i] + '0');
 284:	80 5d       	subi	r24, 0xD0	; 208
 286:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_transmit_byte>
	if (read_word == word) {
		USART_transmit_string("READING WORD: SUCCESS\n\r");
	} else {
		USART_transmit_string("READING WORD: FAILURE\n\r");
		USART_transmit_string("GOT: ");
		for (int i = FIRST_DATA_BYTE; i < FIRST_DATA_BYTE + 4; i++)
 28a:	21 96       	adiw	r28, 0x01	; 1
 28c:	c8 30       	cpi	r28, 0x08	; 8
 28e:	d1 05       	cpc	r29, r1
 290:	b1 f7       	brne	.-20     	; 0x27e <test_RW_word+0x70>
		{
			values[i] = EEPROM_read_byte(i);
			USART_transmit_byte(values[i] + '0');
		}
		USART_transmit_string("\n\rEXPECTED: 16909060\n\r");
 292:	80 ed       	ldi	r24, 0xD0	; 208
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
	}
	
		
	USART_transmit_string("TEST COMPLETED: test_RW_word\n\n\r");
 29a:	87 ee       	ldi	r24, 0xE7	; 231
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_transmit_string>
	
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <main>:
void test_RW_byte();
void test_RW_word();

int main(void)
{
    USART_init();
 2a8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART_init>
	
	EEPROM_reset_header();
 2ac:	0e 94 ef 00 	call	0x1de	; 0x1de <EEPROM_reset_header>
	
	
	// can only run one test at the time since they will use same address-space
	test_RW_word();
 2b0:	0e 94 07 01 	call	0x20e	; 0x20e <test_RW_word>
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0xc>

000002b6 <USART_init>:

#include "USART.h"

void USART_init()
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);		// enable TX and RX
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);     // 8 data bits, 1 stop bit
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// Set baud to 9600
	UBRR0H = 0;                        
 2c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 12;
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Set baud to 9600
	
	UCSR0A |= (1 << U2X0);						// 2X speed
 2cc:	e0 ec       	ldi	r30, 0xC0	; 192
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret

000002d8 <USART_transmit_byte>:
}

void USART_transmit_byte(uint8_t byte) {
	while(!(UCSR0A & (1 <<UDRE0)));	// wait until buffer is empty
 2d8:	e0 ec       	ldi	r30, 0xC0	; 192
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	90 81       	ld	r25, Z
 2de:	95 ff       	sbrs	r25, 5
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <USART_transmit_byte+0x4>
	UDR0 = byte;
 2e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2e6:	08 95       	ret

000002e8 <USART_transmit_string>:
}

void USART_transmit_string(char data[]) {
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
	int i = 0;
	
	while(data[i]) {
 2ee:	88 81       	ld	r24, Y
 2f0:	88 23       	and	r24, r24
 2f2:	31 f0       	breq	.+12     	; 0x300 <USART_transmit_string+0x18>
 2f4:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit_byte(data[i]);
 2f6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_transmit_byte>
}

void USART_transmit_string(char data[]) {
	int i = 0;
	
	while(data[i]) {
 2fa:	89 91       	ld	r24, Y+
 2fc:	81 11       	cpse	r24, r1
 2fe:	fb cf       	rjmp	.-10     	; 0x2f6 <USART_transmit_string+0xe>
		USART_transmit_byte(data[i]);
		i++;
	}
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
