
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  0000024a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001011  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009cf  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000787  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000532  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000852  00000000  00000000  00002ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  8e:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <EEPROM_read_byte>:
}

// reads 4 byte from memory and returns it
uint32_t EEPROM_read_word(uint16_t address){
	return 0;
}
  96:	f8 94       	cli
  98:	f9 99       	sbic	0x1f, 1	; 31
  9a:	fe cf       	rjmp	.-4      	; 0x98 <EEPROM_read_byte+0x2>
  9c:	92 bd       	out	0x22, r25	; 34
  9e:	81 bd       	out	0x21, r24	; 33
  a0:	f8 9a       	sbi	0x1f, 0	; 31
  a2:	80 b5       	in	r24, 0x20	; 32
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <EEPROM_get_free_address>:

// gives the address of the next free byte [xxxxx(address)--------]
// this is stored in the first 2 bytes of EEPROM memory
uint16_t EEPROM_get_free_address() {
  a8:	cf 93       	push	r28
	uint16_t address = 0;
	address |= (EEPROM_read_byte(ADDRESS_HIGH_BYTE) << BYTE);	// set the 8 msb as the address high bits
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
  b2:	c8 2f       	mov	r28, r24
	address |= EEPROM_read_byte(ADDRESS_LOW_BYTE);				// set the 8 lsb as the address high bits
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
	return address;
  bc:	2c 2f       	mov	r18, r28
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	32 2f       	mov	r19, r18
  c2:	22 27       	eor	r18, r18
}
  c4:	a9 01       	movw	r20, r18
  c6:	48 2b       	or	r20, r24
  c8:	ca 01       	movw	r24, r20
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <EEPROM_set_free_address>:

// updates the free address to the next free byte using the size of last written data
void EEPROM_set_free_address(uint8_t size) {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	d8 2f       	mov	r29, r24
	uint16_t last_address = EEPROM_get_free_address();
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_get_free_address>
  d8:	c9 2f       	mov	r28, r25
	uint8_t last_address_low = last_address + size;			// set 8 lsb, WARNING!!! WHAT IF OF?
	uint8_t last_address_high = (last_address >> BYTE);		// set 8 msb
	EEPROM_write_byte(last_address_low, ADDRESS_LOW_BYTE);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	8d 0f       	add	r24, r29
  e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
	EEPROM_write_byte(last_address_high, ADDRESS_HIGH_BYTE);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <EEPROM_write_byte>:
#include "EEPROM.h"
#include "USART.h"  // debugging

// automatically set to atomically RW
void EEPROM_write_byte(uint8_t byte, uint16_t address) {
	cli();								// disable interrupts so we don't get interrupted between seting the master write and write
  f4:	f8 94       	cli
	while(EECR & (1 << EEPE));			// wait until previous write is completed
  f6:	f9 99       	sbic	0x1f, 1	; 31
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <EEPROM_write_byte+0x2>
	while(SELFPRGEN & (1 << SPMCSR));
  fa:	97 b7       	in	r25, 0x37	; 55
	
	EEAR = address;		// write address into address register
  fc:	72 bd       	out	0x22, r23	; 34
  fe:	61 bd       	out	0x21, r22	; 33
	EEDR = byte;		// write data into data register
 100:	80 bd       	out	0x20, r24	; 32
	EECR |= (1 << EEMPE);	// set Master Write Enable
 102:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1 << EEPE);	// within 4 clock cycles enable write
 104:	f9 9a       	sbi	0x1f, 1	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <EEPROM_write_byte+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <EEPROM_write_byte+0x1c>
 110:	00 00       	nop
	_delay_ms(5);			// write takes about 3-4 ms, R.I.P Run In Peace
	
	if (address >= FIRST_DATA_BYTE) {
 112:	62 30       	cpi	r22, 0x02	; 2
 114:	71 05       	cpc	r23, r1
 116:	18 f0       	brcs	.+6      	; 0x11e <EEPROM_write_byte+0x2a>
		EEPROM_set_free_address(1);	// stepping one byte at the time
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_set_free_address>
	}
	sei();								// enable the interrupts
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <EEPROM_write_byte_next_free>:
}

void EEPROM_write_byte_next_free(uint8_t byte) {
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
	uint16_t address = EEPROM_get_free_address();
 126:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_get_free_address>
	EEPROM_write_byte(byte, address);
 12a:	bc 01       	movw	r22, r24
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
}
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <EEPROM_write_word_next_free>:

// writes a word to next free location in EEPROM
void EEPROM_write_word_next_free(uint32_t word) {
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	cf 93       	push	r28
 140:	6b 01       	movw	r12, r22
 142:	7c 01       	movw	r14, r24
	
	uint8_t byte = 0;
	
	for (uint8_t i = WORD-1; i < 255; i--)
 144:	c3 e0       	ldi	r28, 0x03	; 3
	{	
		byte = (word >> (i * BYTE));			// take the 8 msb and store them at a time [1010101011111111] => [10101010] at address n, [11111111] at address n+1
		EEPROM_write_byte_next_free(byte);
 146:	8c 2f       	mov	r24, r28
 148:	88 0f       	add	r24, r24
 14a:	88 0f       	add	r24, r24
 14c:	88 0f       	add	r24, r24
 14e:	a7 01       	movw	r20, r14
 150:	96 01       	movw	r18, r12
 152:	04 c0       	rjmp	.+8      	; 0x15c <EEPROM_write_word_next_free+0x26>
 154:	56 95       	lsr	r21
 156:	47 95       	ror	r20
 158:	37 95       	ror	r19
 15a:	27 95       	ror	r18
 15c:	8a 95       	dec	r24
 15e:	d2 f7       	brpl	.-12     	; 0x154 <EEPROM_write_word_next_free+0x1e>
 160:	da 01       	movw	r26, r20
 162:	c9 01       	movw	r24, r18
 164:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_write_byte_next_free>
// writes a word to next free location in EEPROM
void EEPROM_write_word_next_free(uint32_t word) {
	
	uint8_t byte = 0;
	
	for (uint8_t i = WORD-1; i < 255; i--)
 168:	c1 50       	subi	r28, 0x01	; 1
 16a:	68 f7       	brcc	.-38     	; 0x146 <EEPROM_write_word_next_free+0x10>
	{	
		byte = (word >> (i * BYTE));			// take the 8 msb and store them at a time [1010101011111111] => [10101010] at address n, [11111111] at address n+1
		EEPROM_write_byte_next_free(byte);
	}
}
 16c:	cf 91       	pop	r28
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	08 95       	ret

00000178 <EEPROM_clear>:
	EEPROM_write_byte(last_address_high, ADDRESS_HIGH_BYTE);
}

// !!!!!!!!!WARNING!!!!!!!!!!!!! Overwrites the entire EEPROM with zeros and resets next free memory location
// takes ~ 5ms/byte in EEPROM
void EEPROM_clear() {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	USART_transmit_string("CLEARING THE EEPROM. THIS MIGHT TAKE A WHILE!!!\n\r");
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 14 01 	call	0x228	; 0x228 <USART_transmit_string>
	for (int i = FIRST_DATA_BYTE; i < 12; i++)	// only erase 10 first bytes debuggmode
 184:	c2 e0       	ldi	r28, 0x02	; 2
 186:	d0 e0       	ldi	r29, 0x00	; 0
	{
		EEPROM_write_byte(0, i);
 188:	be 01       	movw	r22, r28
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>

// !!!!!!!!!WARNING!!!!!!!!!!!!! Overwrites the entire EEPROM with zeros and resets next free memory location
// takes ~ 5ms/byte in EEPROM
void EEPROM_clear() {
	USART_transmit_string("CLEARING THE EEPROM. THIS MIGHT TAKE A WHILE!!!\n\r");
	for (int i = FIRST_DATA_BYTE; i < 12; i++)	// only erase 10 first bytes debuggmode
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	cc 30       	cpi	r28, 0x0C	; 12
 194:	d1 05       	cpc	r29, r1
 196:	c1 f7       	brne	.-16     	; 0x188 <EEPROM_clear+0x10>
	{
		EEPROM_write_byte(0, i);
	}
	EEPROM_write_byte(0, ADDRESS_HIGH_BYTE);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
	EEPROM_write_byte(FIRST_DATA_BYTE, ADDRESS_LOW_BYTE);  // set the address of the first available byte as 2
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_write_byte>
	USART_transmit_string("\n\rEEPROM CLEARED!\n\r");
 1ac:	82 e3       	ldi	r24, 0x32	; 50
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 14 01 	call	0x228	; 0x228 <USART_transmit_string>
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <test_RW_word>:
	USART_transmit_byte(d);
	USART_transmit_byte('\n');
	USART_transmit_byte('\r');
}

void test_RW_word() {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
	uint8_t values[4] = {0,0,0,0};
	
	uint32_t word = 0b00000001000000100000001100000100;  // [1,2,3,4] as seperate bytes
	
	EEPROM_write_word_next_free(word);
 1be:	64 e0       	ldi	r22, 0x04	; 4
 1c0:	73 e0       	ldi	r23, 0x03	; 3
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 9b 00 	call	0x136	; 0x136 <EEPROM_write_word_next_free>
	
	for (int i = FIRST_DATA_BYTE; i < FIRST_DATA_BYTE + 4; i++)
 1ca:	c2 e0       	ldi	r28, 0x02	; 2
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		values[i] = EEPROM_read_byte(i);
 1ce:	ce 01       	movw	r24, r28
 1d0:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
		USART_transmit_byte(values[i] + '0');
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	0e 94 0c 01 	call	0x218	; 0x218 <USART_transmit_byte>
	
	uint32_t word = 0b00000001000000100000001100000100;  // [1,2,3,4] as seperate bytes
	
	EEPROM_write_word_next_free(word);
	
	for (int i = FIRST_DATA_BYTE; i < FIRST_DATA_BYTE + 4; i++)
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	c6 30       	cpi	r28, 0x06	; 6
 1de:	d1 05       	cpc	r29, r1
 1e0:	b1 f7       	brne	.-20     	; 0x1ce <test_RW_word+0x14>
	{
		values[i] = EEPROM_read_byte(i);
		USART_transmit_byte(values[i] + '0');
	}
	
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <main>:
void test_RW_byte();
void test_RW_word();

int main(void)
{
    USART_init();
 1e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <USART_init>
	
	EEPROM_clear();
 1ec:	0e 94 bc 00 	call	0x178	; 0x178 <EEPROM_clear>
	
	test_RW_word();
 1f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <test_RW_word>
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0xc>

000001f6 <USART_init>:

#include "USART.h"

void USART_init()
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);		// enable TX and RX
 1f6:	88 e1       	ldi	r24, 0x18	; 24
 1f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);     // 8 data bits, 1 stop bit
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// Set baud to 9600
	UBRR0H = 0;                        
 202:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 12;
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Set baud to 9600
	
	UCSR0A |= (1 << U2X0);						// 2X speed
 20c:	e0 ec       	ldi	r30, 0xC0	; 192
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <USART_transmit_byte>:
}

void USART_transmit_byte(uint8_t byte) {
	while(!(UCSR0A & (1 <<UDRE0)));	// wait until buffer is empty
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	90 81       	ld	r25, Z
 21e:	95 ff       	sbrs	r25, 5
 220:	fd cf       	rjmp	.-6      	; 0x21c <USART_transmit_byte+0x4>
	UDR0 = byte;
 222:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 226:	08 95       	ret

00000228 <USART_transmit_string>:
}

void USART_transmit_string(char *data) {
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	int i = 0;
	
	while(data[i]) {
 22e:	88 81       	ld	r24, Y
 230:	88 23       	and	r24, r24
 232:	31 f0       	breq	.+12     	; 0x240 <USART_transmit_string+0x18>
 234:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit_byte(data[i]);
 236:	0e 94 0c 01 	call	0x218	; 0x218 <USART_transmit_byte>
}

void USART_transmit_string(char *data) {
	int i = 0;
	
	while(data[i]) {
 23a:	89 91       	ld	r24, Y+
 23c:	81 11       	cpse	r24, r1
 23e:	fb cf       	rjmp	.-10     	; 0x236 <USART_transmit_string+0xe>
		USART_transmit_byte(data[i]);
		i++;
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
