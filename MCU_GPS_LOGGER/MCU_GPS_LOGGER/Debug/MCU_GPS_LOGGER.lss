
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  000005b2  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001513  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b26  00000000  00000000  00001d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ea  00000000  00000000  000028ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000334  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000616  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c4d  00000000  00000000  00003be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000482f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3a       	cpi	r26, 0xAE	; 174
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  8e:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <EEPROM_read_byte>:
		EEPROM_write_byte_next_free(byte);
	}
}

uint8_t EEPROM_read_byte(uint16_t address) {
	cli();							// disable interrupts
  96:	f8 94       	cli
	
	uint8_t byte = 0;
	
	while(EECR & (1 << EEPE));	// check that no one is writing data to EEPROM
  98:	f9 99       	sbic	0x1f, 1	; 31
  9a:	fe cf       	rjmp	.-4      	; 0x98 <EEPROM_read_byte+0x2>
	
	EEAR = address;					// set address to read from
  9c:	92 bd       	out	0x22, r25	; 34
  9e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);			// enable reading 
  a0:	f8 9a       	sbi	0x1f, 0	; 31
	
	byte = EEDR;
  a2:	80 b5       	in	r24, 0x20	; 32
	
	sei();							// enable interrupts
  a4:	78 94       	sei

	return byte;
}
  a6:	08 95       	ret

000000a8 <EEPROM_read_word>:

// reads 4 byte from memory starting at address and returns it
uint32_t EEPROM_read_word(uint16_t address){
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	8c 01       	movw	r16, r24
  ba:	c8 e1       	ldi	r28, 0x18	; 24
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t byte = 0;
	uint32_t word = 0;
  be:	c1 2c       	mov	r12, r1
  c0:	d1 2c       	mov	r13, r1
  c2:	76 01       	movw	r14, r12
	
	for (uint8_t i = 0; i < WORD; i++)
	{
		byte = EEPROM_read_byte(address + i);
  c4:	c8 01       	movw	r24, r16
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
		word |= (byte << (WORD - i - 1) * BYTE);
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	0c 2e       	mov	r0, r28
  d2:	04 c0       	rjmp	.+8      	; 0xdc <EEPROM_read_word+0x34>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	aa 1f       	adc	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	0a 94       	dec	r0
  de:	d2 f7       	brpl	.-12     	; 0xd4 <EEPROM_read_word+0x2c>
  e0:	c8 2a       	or	r12, r24
  e2:	d9 2a       	or	r13, r25
  e4:	ea 2a       	or	r14, r26
  e6:	fb 2a       	or	r15, r27
  e8:	0f 5f       	subi	r16, 0xFF	; 255
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	28 97       	sbiw	r28, 0x08	; 8
// reads 4 byte from memory starting at address and returns it
uint32_t EEPROM_read_word(uint16_t address){
	uint32_t byte = 0;
	uint32_t word = 0;
	
	for (uint8_t i = 0; i < WORD; i++)
  ee:	c8 3f       	cpi	r28, 0xF8	; 248
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	d8 07       	cpc	r29, r24
  f4:	39 f7       	brne	.-50     	; 0xc4 <EEPROM_read_word+0x1c>
		byte = EEPROM_read_byte(address + i);
		word |= (byte << (WORD - i - 1) * BYTE);
	}
	
	return word;
}
  f6:	c7 01       	movw	r24, r14
  f8:	b6 01       	movw	r22, r12
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	df 90       	pop	r13
 108:	cf 90       	pop	r12
 10a:	08 95       	ret

0000010c <EEPROM_get_free_address>:

// gives the address of the next free byte [xxxxx(address)--------]
// this is stored in the first 2 bytes of EEPROM memory
uint16_t EEPROM_get_free_address() {
 10c:	cf 93       	push	r28
	uint16_t address = 0;
	address |= (EEPROM_read_byte(ADDRESS_HIGH_BYTE) << BYTE);	// set the 8 msb as the address high bits
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 116:	c8 2f       	mov	r28, r24
	address |= EEPROM_read_byte(ADDRESS_LOW_BYTE);				// set the 8 lsb as the address high bits
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
	return address;
 120:	2c 2f       	mov	r18, r28
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	32 2f       	mov	r19, r18
 126:	22 27       	eor	r18, r18
}
 128:	a9 01       	movw	r20, r18
 12a:	48 2b       	or	r20, r24
 12c:	ca 01       	movw	r24, r20
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <EEPROM_set_free_address>:

// updates the free address to the next free byte using the size of last written data
void EEPROM_set_free_address(uint8_t size) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	c8 2f       	mov	r28, r24
	uint16_t last_address = EEPROM_get_free_address();
 138:	0e 94 86 00 	call	0x10c	; 0x10c <EEPROM_get_free_address>
	last_address += size;
 13c:	8c 0f       	add	r24, r28
 13e:	91 1d       	adc	r25, r1
 140:	ec 01       	movw	r28, r24
	uint8_t last_address_low = last_address;			// set 8 lsb, 
	uint8_t last_address_high = (last_address >> BYTE);		// set 8 msb
	EEPROM_write_byte(last_address_low, ADDRESS_LOW_BYTE);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
	EEPROM_write_byte(last_address_high, ADDRESS_HIGH_BYTE);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	8d 2f       	mov	r24, r29
 150:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <EEPROM_write_byte>:
#include "EEPROM.h"
#include "USART.h"  // debugging

// automatically set to atomically RW
void EEPROM_write_byte(uint8_t byte, uint16_t address) {
	cli();								// disable interrupts so we don't get interrupted between seting the master write and write
 15a:	f8 94       	cli
	while(EECR & (1 << EEPE));			// wait until previous write is completed
 15c:	f9 99       	sbic	0x1f, 1	; 31
 15e:	fe cf       	rjmp	.-4      	; 0x15c <EEPROM_write_byte+0x2>
	while(SELFPRGEN & (1 << SPMCSR));
 160:	97 b7       	in	r25, 0x37	; 55
	
	EEAR = address;		// write address into address register
 162:	72 bd       	out	0x22, r23	; 34
 164:	61 bd       	out	0x21, r22	; 33
	EEDR = byte;		// write data into data register
 166:	80 bd       	out	0x20, r24	; 32
	EECR |= (1 << EEMPE);	// set Master Write Enable
 168:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1 << EEPE);	// within 4 clock cycles enable write
 16a:	f9 9a       	sbi	0x1f, 1	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	81 ee       	ldi	r24, 0xE1	; 225
 16e:	94 e0       	ldi	r25, 0x04	; 4
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <EEPROM_write_byte+0x16>
 174:	00 c0       	rjmp	.+0      	; 0x176 <EEPROM_write_byte+0x1c>
 176:	00 00       	nop
	_delay_ms(5);			// write takes about 3-4 ms, R.I.P Run In Peace
	
	if (address >= FIRST_DATA_BYTE) {
 178:	62 30       	cpi	r22, 0x02	; 2
 17a:	71 05       	cpc	r23, r1
 17c:	18 f0       	brcs	.+6      	; 0x184 <EEPROM_write_byte+0x2a>
		EEPROM_set_free_address(1);	// stepping one byte at the time
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 99 00 	call	0x132	; 0x132 <EEPROM_set_free_address>
	}
	sei();								// enable the interrupts
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <EEPROM_write_byte_next_free>:
}

void EEPROM_write_byte_next_free(uint8_t byte) {
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
	uint16_t address = EEPROM_get_free_address();
 18c:	0e 94 86 00 	call	0x10c	; 0x10c <EEPROM_get_free_address>
	EEPROM_write_byte(byte, address);
 190:	bc 01       	movw	r22, r24
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 ad 00 	call	0x15a	; 0x15a <EEPROM_write_byte>
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <EEPROM_write_word_next_free>:

// writes a word to next free location in EEPROM
void EEPROM_write_word_next_free(uint32_t word) {
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	cf 93       	push	r28
 1a6:	6b 01       	movw	r12, r22
 1a8:	7c 01       	movw	r14, r24
	
	uint8_t byte = 0;
	
	for (uint8_t i = WORD-1; i < 255; i--)
 1aa:	c3 e0       	ldi	r28, 0x03	; 3
	{	
		byte = (word >> (i * BYTE));			// take the 8 msb and store them at a time [1010101011111111] => [10101010] at address n, [11111111] at address n+1
		EEPROM_write_byte_next_free(byte);
 1ac:	8c 2f       	mov	r24, r28
 1ae:	88 0f       	add	r24, r24
 1b0:	88 0f       	add	r24, r24
 1b2:	88 0f       	add	r24, r24
 1b4:	a7 01       	movw	r20, r14
 1b6:	96 01       	movw	r18, r12
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <EEPROM_write_word_next_free+0x26>
 1ba:	56 95       	lsr	r21
 1bc:	47 95       	ror	r20
 1be:	37 95       	ror	r19
 1c0:	27 95       	ror	r18
 1c2:	8a 95       	dec	r24
 1c4:	d2 f7       	brpl	.-12     	; 0x1ba <EEPROM_write_word_next_free+0x1e>
 1c6:	da 01       	movw	r26, r20
 1c8:	c9 01       	movw	r24, r18
 1ca:	0e 94 c4 00 	call	0x188	; 0x188 <EEPROM_write_byte_next_free>
// writes a word to next free location in EEPROM
void EEPROM_write_word_next_free(uint32_t word) {
	
	uint8_t byte = 0;
	
	for (uint8_t i = WORD-1; i < 255; i--)
 1ce:	c1 50       	subi	r28, 0x01	; 1
 1d0:	68 f7       	brcc	.-38     	; 0x1ac <EEPROM_write_word_next_free+0x10>
	{	
		byte = (word >> (i * BYTE));			// take the 8 msb and store them at a time [1010101011111111] => [10101010] at address n, [11111111] at address n+1
		EEPROM_write_byte_next_free(byte);
	}
}
 1d2:	cf 91       	pop	r28
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <store_struct>:
	int8_t minute;
} gps_t;
*/


void store_struct(gps_t *gps_data) {
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	EEPROM_write_word_next_free(gps_data->lattitude);
 1e4:	68 81       	ld	r22, Y
 1e6:	79 81       	ldd	r23, Y+1	; 0x01
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	9b 81       	ldd	r25, Y+3	; 0x03
 1ec:	0e 94 ce 00 	call	0x19c	; 0x19c <EEPROM_write_word_next_free>
	EEPROM_write_word_next_free(gps_data->longitude);
 1f0:	6c 81       	ldd	r22, Y+4	; 0x04
 1f2:	7d 81       	ldd	r23, Y+5	; 0x05
 1f4:	8e 81       	ldd	r24, Y+6	; 0x06
 1f6:	9f 81       	ldd	r25, Y+7	; 0x07
 1f8:	0e 94 ce 00 	call	0x19c	; 0x19c <EEPROM_write_word_next_free>
	EEPROM_write_byte_next_free(gps_data->month);
 1fc:	88 85       	ldd	r24, Y+8	; 0x08
 1fe:	0e 94 c4 00 	call	0x188	; 0x188 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free(gps_data->day);
 202:	89 85       	ldd	r24, Y+9	; 0x09
 204:	0e 94 c4 00 	call	0x188	; 0x188 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free(gps_data->hour);
 208:	8a 85       	ldd	r24, Y+10	; 0x0a
 20a:	0e 94 c4 00 	call	0x188	; 0x188 <EEPROM_write_byte_next_free>
	EEPROM_write_byte_next_free(gps_data->minute);
 20e:	8b 85       	ldd	r24, Y+11	; 0x0b
 210:	0e 94 c4 00 	call	0x188	; 0x188 <EEPROM_write_byte_next_free>
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <print_struct>:

void print_struct(gps_t *gps_data) {
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
	USART_transmit_string("\n\r########### GPS DATA ###########");
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_string("\n\rLattitude: ");
 228:	83 e2       	ldi	r24, 0x23	; 35
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_word(gps_data->lattitude);
 230:	68 81       	ld	r22, Y
 232:	79 81       	ldd	r23, Y+1	; 0x01
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	9b 81       	ldd	r25, Y+3	; 0x03
 238:	0e 94 56 02 	call	0x4ac	; 0x4ac <USART_transmit_word>
	
	USART_transmit_string("\n\rLongitude: ");
 23c:	81 e3       	ldi	r24, 0x31	; 49
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_word(gps_data->longitude);
 244:	6c 81       	ldd	r22, Y+4	; 0x04
 246:	7d 81       	ldd	r23, Y+5	; 0x05
 248:	8e 81       	ldd	r24, Y+6	; 0x06
 24a:	9f 81       	ldd	r25, Y+7	; 0x07
 24c:	0e 94 56 02 	call	0x4ac	; 0x4ac <USART_transmit_word>
	
	USART_transmit_string("\n\rMonth: ");
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_byte(gps_data->month + '0');
 258:	88 85       	ldd	r24, Y+8	; 0x08
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
	
	USART_transmit_string("\n\rDay: ");
 260:	89 e4       	ldi	r24, 0x49	; 73
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_byte(gps_data->day + '0');
 268:	89 85       	ldd	r24, Y+9	; 0x09
 26a:	80 5d       	subi	r24, 0xD0	; 208
 26c:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
	
	USART_transmit_string("\n\rHour: ");
 270:	81 e5       	ldi	r24, 0x51	; 81
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_byte(gps_data->hour + '0');
 278:	8a 85       	ldd	r24, Y+10	; 0x0a
 27a:	80 5d       	subi	r24, 0xD0	; 208
 27c:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
	
	USART_transmit_string("\n\rMinute: ");
 280:	8a e5       	ldi	r24, 0x5A	; 90
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_byte(gps_data->minute + '0');
 288:	8b 85       	ldd	r24, Y+11	; 0x0b
 28a:	80 5d       	subi	r24, 0xD0	; 208
 28c:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
	USART_transmit_string("\n\r");
 290:	85 e6       	ldi	r24, 0x65	; 101
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <get_struct>:

gps_t *get_next_struct();

void get_struct(uint8_t index, gps_t *gps_data) {
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	8b 01       	movw	r16, r22
	uint16_t address = index * sizeof(gps_t) + EEPROM_HEADER_SIZE;
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	ec 01       	movw	r28, r24
 2ac:	cc 0f       	add	r28, r28
 2ae:	dd 1f       	adc	r29, r29
 2b0:	8c 0f       	add	r24, r28
 2b2:	9d 1f       	adc	r25, r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	cc 0f       	add	r28, r28
 2b8:	dd 1f       	adc	r29, r29
 2ba:	cc 0f       	add	r28, r28
 2bc:	dd 1f       	adc	r29, r29
	gps_data->lattitude = EEPROM_read_word(address);
 2be:	ce 01       	movw	r24, r28
 2c0:	02 96       	adiw	r24, 0x02	; 2
 2c2:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_read_word>
 2c6:	f8 01       	movw	r30, r16
 2c8:	60 83       	st	Z, r22
 2ca:	71 83       	std	Z+1, r23	; 0x01
 2cc:	82 83       	std	Z+2, r24	; 0x02
 2ce:	93 83       	std	Z+3, r25	; 0x03
	address += sizeof(uint32_t);
	gps_data->longitude = EEPROM_read_word(address);
 2d0:	ce 01       	movw	r24, r28
 2d2:	06 96       	adiw	r24, 0x06	; 6
 2d4:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_read_word>
 2d8:	f8 01       	movw	r30, r16
 2da:	64 83       	std	Z+4, r22	; 0x04
 2dc:	75 83       	std	Z+5, r23	; 0x05
 2de:	86 83       	std	Z+6, r24	; 0x06
 2e0:	97 83       	std	Z+7, r25	; 0x07
	address += sizeof(uint32_t);
	gps_data->month = EEPROM_read_byte(address);
 2e2:	ce 01       	movw	r24, r28
 2e4:	0a 96       	adiw	r24, 0x0a	; 10
 2e6:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 2ea:	f8 01       	movw	r30, r16
 2ec:	80 87       	std	Z+8, r24	; 0x08
	address += sizeof(uint8_t);
	gps_data->day = EEPROM_read_byte(address);
 2ee:	ce 01       	movw	r24, r28
 2f0:	0b 96       	adiw	r24, 0x0b	; 11
 2f2:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 2f6:	f8 01       	movw	r30, r16
 2f8:	81 87       	std	Z+9, r24	; 0x09
	address += sizeof(uint8_t);
	gps_data->hour = EEPROM_read_byte(address);
 2fa:	ce 01       	movw	r24, r28
 2fc:	0c 96       	adiw	r24, 0x0c	; 12
 2fe:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 302:	f8 01       	movw	r30, r16
 304:	82 87       	std	Z+10, r24	; 0x0a
	address += sizeof(uint8_t);
	gps_data->minute = EEPROM_read_byte(address);
 306:	ce 01       	movw	r24, r28
 308:	0d 96       	adiw	r24, 0x0d	; 13
 30a:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_read_byte>
 30e:	f8 01       	movw	r30, r16
 310:	83 87       	std	Z+11, r24	; 0x0b
	address += sizeof(uint8_t);
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <main>:



int main(void)
{
	USART_init();
 31c:	0e 94 2e 02 	call	0x45c	; 0x45c <USART_init>
	USART_clear_putty();
 320:	0e 94 a9 02 	call	0x552	; 0x552 <USART_clear_putty>
	
	test_store_load_struct();
 324:	0e 94 ca 01 	call	0x394	; 0x394 <test_store_load_struct>
 328:	ff cf       	rjmp	.-2      	; 0x328 <main+0xc>

0000032a <init_structs>:
	print_struct(&temp);
	USART_transmit_string("#############################################");
}


void init_structs(gps_t *gps1, gps_t *gps2) {
 32a:	dc 01       	movw	r26, r24
 32c:	fb 01       	movw	r30, r22
	gps1->lattitude = 1;
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	4d 93       	st	X+, r20
 338:	5d 93       	st	X+, r21
 33a:	6d 93       	st	X+, r22
 33c:	7c 93       	st	X, r23
 33e:	13 97       	sbiw	r26, 0x03	; 3
	gps1->longitude = 2;
 340:	42 e0       	ldi	r20, 0x02	; 2
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	14 96       	adiw	r26, 0x04	; 4
 34a:	4d 93       	st	X+, r20
 34c:	5d 93       	st	X+, r21
 34e:	6d 93       	st	X+, r22
 350:	7c 93       	st	X, r23
 352:	17 97       	sbiw	r26, 0x07	; 7
	gps1->month = 3;
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	18 96       	adiw	r26, 0x08	; 8
 358:	8c 93       	st	X, r24
 35a:	18 97       	sbiw	r26, 0x08	; 8
	gps1->day = 4;
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	19 96       	adiw	r26, 0x09	; 9
 360:	8c 93       	st	X, r24
 362:	19 97       	sbiw	r26, 0x09	; 9
	gps1->hour = 5;
 364:	85 e0       	ldi	r24, 0x05	; 5
 366:	1a 96       	adiw	r26, 0x0a	; 10
 368:	8c 93       	st	X, r24
 36a:	1a 97       	sbiw	r26, 0x0a	; 10
	gps1->minute = 6;
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	1b 96       	adiw	r26, 0x0b	; 11
 370:	8c 93       	st	X, r24
	
	gps2->lattitude = 7;
 372:	87 e0       	ldi	r24, 0x07	; 7
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	80 83       	st	Z, r24
 37c:	91 83       	std	Z+1, r25	; 0x01
 37e:	a2 83       	std	Z+2, r26	; 0x02
 380:	b3 83       	std	Z+3, r27	; 0x03
	gps2->longitude = 7;
 382:	84 83       	std	Z+4, r24	; 0x04
 384:	95 83       	std	Z+5, r25	; 0x05
 386:	a6 83       	std	Z+6, r26	; 0x06
 388:	b7 83       	std	Z+7, r27	; 0x07
	gps2->month = 7;
 38a:	80 87       	std	Z+8, r24	; 0x08
	gps2->day = 7;
 38c:	81 87       	std	Z+9, r24	; 0x09
	gps2->hour = 7;
 38e:	82 87       	std	Z+10, r24	; 0x0a
	gps2->minute = 7;
 390:	83 87       	std	Z+11, r24	; 0x0b
 392:	08 95       	ret

00000394 <test_store_load_struct>:


void translator_test_all() {
	test_store_load_struct();
}
void test_store_load_struct() {
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	a4 97       	sbiw	r28, 0x24	; 36
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
	gps_t gps1;
	gps_t gps2;
	gps_t temp = {0,0,0,0,0,0};
 3ac:	8e 01       	movw	r16, r28
 3ae:	07 5e       	subi	r16, 0xE7	; 231
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	f8 01       	movw	r30, r16
 3b6:	11 92       	st	Z+, r1
 3b8:	8a 95       	dec	r24
 3ba:	e9 f7       	brne	.-6      	; 0x3b6 <test_store_load_struct+0x22>
	
	init_structs(&gps1, &gps2);
 3bc:	be 01       	movw	r22, r28
 3be:	63 5f       	subi	r22, 0xF3	; 243
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	0e 94 95 01 	call	0x32a	; 0x32a <init_structs>
	
	store_struct(&gps1);	// should be stored at address 2
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	0e 94 ef 00 	call	0x1de	; 0x1de <store_struct>
	store_struct(&gps2);	// should be stored at address 14
 3d2:	ce 01       	movw	r24, r28
 3d4:	0d 96       	adiw	r24, 0x0d	; 13
 3d6:	0e 94 ef 00 	call	0x1de	; 0x1de <store_struct>
	
	get_struct(0, &temp);
 3da:	b8 01       	movw	r22, r16
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 4f 01 	call	0x29e	; 0x29e <get_struct>
	USART_transmit_string("#############################################");
 3e2:	8f e7       	ldi	r24, 0x7F	; 127
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_string("\n\rEXPECTED: ");
 3ea:	88 e6       	ldi	r24, 0x68	; 104
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	print_struct(&gps1);
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 0d 01 	call	0x21a	; 0x21a <print_struct>
	USART_transmit_string("\n\rGOT:");
 3fa:	85 e7       	ldi	r24, 0x75	; 117
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	print_struct(&temp);
 402:	c8 01       	movw	r24, r16
 404:	0e 94 0d 01 	call	0x21a	; 0x21a <print_struct>
	USART_transmit_string("#############################################");
 408:	8f e7       	ldi	r24, 0x7F	; 127
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	
	get_struct(1, &temp);
 410:	b8 01       	movw	r22, r16
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 4f 01 	call	0x29e	; 0x29e <get_struct>
	
	USART_transmit_string("\n\n\r#############################################");
 418:	8c e7       	ldi	r24, 0x7C	; 124
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	USART_transmit_string("\n\rEXPECTED: ");
 420:	88 e6       	ldi	r24, 0x68	; 104
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	print_struct(&gps2);
 428:	ce 01       	movw	r24, r28
 42a:	0d 96       	adiw	r24, 0x0d	; 13
 42c:	0e 94 0d 01 	call	0x21a	; 0x21a <print_struct>
	USART_transmit_string("\n\rGOT:");
 430:	85 e7       	ldi	r24, 0x75	; 117
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
	print_struct(&temp);
 438:	c8 01       	movw	r24, r16
 43a:	0e 94 0d 01 	call	0x21a	; 0x21a <print_struct>
	USART_transmit_string("#############################################");
 43e:	8f e7       	ldi	r24, 0x7F	; 127
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 47 02 	call	0x48e	; 0x48e <USART_transmit_string>
}
 446:	a4 96       	adiw	r28, 0x24	; 36
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <USART_init>:
			USART_transmit_byte('1');
		} else {
			USART_transmit_byte('0');
		}
	}
}
 45c:	88 e1       	ldi	r24, 0x18	; 24
 45e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 468:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 46c:	8c e0       	ldi	r24, 0x0C	; 12
 46e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 472:	e0 ec       	ldi	r30, 0xC0	; 192
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	82 60       	ori	r24, 0x02	; 2
 47a:	80 83       	st	Z, r24
 47c:	08 95       	ret

0000047e <USART_transmit_byte>:
 47e:	e0 ec       	ldi	r30, 0xC0	; 192
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	90 81       	ld	r25, Z
 484:	95 ff       	sbrs	r25, 5
 486:	fd cf       	rjmp	.-6      	; 0x482 <USART_transmit_byte+0x4>
 488:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 48c:	08 95       	ret

0000048e <USART_transmit_string>:
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
 494:	88 81       	ld	r24, Y
 496:	88 23       	and	r24, r24
 498:	31 f0       	breq	.+12     	; 0x4a6 <USART_transmit_string+0x18>
 49a:	21 96       	adiw	r28, 0x01	; 1
 49c:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
 4a0:	89 91       	ld	r24, Y+
 4a2:	81 11       	cpse	r24, r1
 4a4:	fb cf       	rjmp	.-10     	; 0x49c <USART_transmit_string+0xe>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <USART_transmit_word>:

void USART_transmit_word(uint32_t word) {
 4ac:	4f 92       	push	r4
 4ae:	5f 92       	push	r5
 4b0:	6f 92       	push	r6
 4b2:	7f 92       	push	r7
 4b4:	8f 92       	push	r8
 4b6:	9f 92       	push	r9
 4b8:	af 92       	push	r10
 4ba:	bf 92       	push	r11
 4bc:	cf 92       	push	r12
 4be:	df 92       	push	r13
 4c0:	ef 92       	push	r14
 4c2:	ff 92       	push	r15
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	2b 01       	movw	r4, r22
 4ca:	3c 01       	movw	r6, r24
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	3a ec       	ldi	r19, 0xCA	; 202
 4d0:	4a e9       	ldi	r20, 0x9A	; 154
 4d2:	5b e3       	ldi	r21, 0x3B	; 59
 4d4:	0e 94 b5 02 	call	0x56a	; 0x56a <__udivmodsi4>
 4d8:	80 e3       	ldi	r24, 0x30	; 48
 4da:	82 0f       	add	r24, r18
 4dc:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
 4e0:	c9 e0       	ldi	r28, 0x09	; 9
 4e2:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;
 4e4:	0f 2e       	mov	r0, r31
 4e6:	c1 2c       	mov	r12, r1
 4e8:	fa ec       	ldi	r31, 0xCA	; 202
 4ea:	df 2e       	mov	r13, r31
 4ec:	fa e9       	ldi	r31, 0x9A	; 154
 4ee:	ef 2e       	mov	r14, r31
 4f0:	fb e3       	ldi	r31, 0x3B	; 59
 4f2:	ff 2e       	mov	r15, r31
 4f4:	f0 2d       	mov	r31, r0

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
		divisor = divisor / 10;
 4f6:	0f 2e       	mov	r0, r31
 4f8:	fa e0       	ldi	r31, 0x0A	; 10
 4fa:	8f 2e       	mov	r8, r31
 4fc:	91 2c       	mov	r9, r1
 4fe:	a1 2c       	mov	r10, r1
 500:	b1 2c       	mov	r11, r1
 502:	f0 2d       	mov	r31, r0
 504:	c7 01       	movw	r24, r14
 506:	b6 01       	movw	r22, r12
 508:	a5 01       	movw	r20, r10
 50a:	94 01       	movw	r18, r8
 50c:	0e 94 b5 02 	call	0x56a	; 0x56a <__udivmodsi4>
 510:	69 01       	movw	r12, r18
 512:	7a 01       	movw	r14, r20
		USART_transmit_byte(((word / divisor) % 10) + '0');
 514:	c3 01       	movw	r24, r6
 516:	b2 01       	movw	r22, r4
 518:	0e 94 b5 02 	call	0x56a	; 0x56a <__udivmodsi4>
 51c:	ca 01       	movw	r24, r20
 51e:	b9 01       	movw	r22, r18
 520:	a5 01       	movw	r20, r10
 522:	94 01       	movw	r18, r8
 524:	0e 94 b5 02 	call	0x56a	; 0x56a <__udivmodsi4>
 528:	80 e3       	ldi	r24, 0x30	; 48
 52a:	86 0f       	add	r24, r22
 52c:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
 530:	21 97       	sbiw	r28, 0x01	; 1
void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
 532:	41 f7       	brne	.-48     	; 0x504 <USART_transmit_word+0x58>
		divisor = divisor / 10;
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	bf 90       	pop	r11
 542:	af 90       	pop	r10
 544:	9f 90       	pop	r9
 546:	8f 90       	pop	r8
 548:	7f 90       	pop	r7
 54a:	6f 90       	pop	r6
 54c:	5f 90       	pop	r5
 54e:	4f 90       	pop	r4
 550:	08 95       	ret

00000552 <USART_clear_putty>:

void USART_clear_putty() {
 552:	cf 93       	push	r28
 554:	c4 e1       	ldi	r28, 0x14	; 20
	for (uint8_t i = 0; i < 20; i++)
	{
		USART_transmit_byte('\n');
 556:	8a e0       	ldi	r24, 0x0A	; 10
 558:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
 55c:	c1 50       	subi	r28, 0x01	; 1
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}

void USART_clear_putty() {
	for (uint8_t i = 0; i < 20; i++)
 55e:	d9 f7       	brne	.-10     	; 0x556 <USART_clear_putty+0x4>
	{
		USART_transmit_byte('\n');
	}
	USART_transmit_byte('\r');
 560:	8d e0       	ldi	r24, 0x0D	; 13
 562:	0e 94 3f 02 	call	0x47e	; 0x47e <USART_transmit_byte>
}
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <__udivmodsi4>:
 56a:	a1 e2       	ldi	r26, 0x21	; 33
 56c:	1a 2e       	mov	r1, r26
 56e:	aa 1b       	sub	r26, r26
 570:	bb 1b       	sub	r27, r27
 572:	fd 01       	movw	r30, r26
 574:	0d c0       	rjmp	.+26     	; 0x590 <__udivmodsi4_ep>

00000576 <__udivmodsi4_loop>:
 576:	aa 1f       	adc	r26, r26
 578:	bb 1f       	adc	r27, r27
 57a:	ee 1f       	adc	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	a2 17       	cp	r26, r18
 580:	b3 07       	cpc	r27, r19
 582:	e4 07       	cpc	r30, r20
 584:	f5 07       	cpc	r31, r21
 586:	20 f0       	brcs	.+8      	; 0x590 <__udivmodsi4_ep>
 588:	a2 1b       	sub	r26, r18
 58a:	b3 0b       	sbc	r27, r19
 58c:	e4 0b       	sbc	r30, r20
 58e:	f5 0b       	sbc	r31, r21

00000590 <__udivmodsi4_ep>:
 590:	66 1f       	adc	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	88 1f       	adc	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	1a 94       	dec	r1
 59a:	69 f7       	brne	.-38     	; 0x576 <__udivmodsi4_loop>
 59c:	60 95       	com	r22
 59e:	70 95       	com	r23
 5a0:	80 95       	com	r24
 5a2:	90 95       	com	r25
 5a4:	9b 01       	movw	r18, r22
 5a6:	ac 01       	movw	r20, r24
 5a8:	bd 01       	movw	r22, r26
 5aa:	cf 01       	movw	r24, r30
 5ac:	08 95       	ret

000005ae <_exit>:
 5ae:	f8 94       	cli

000005b0 <__stop_program>:
 5b0:	ff cf       	rjmp	.-2      	; 0x5b0 <__stop_program>
