
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c26  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084d  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f8  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000475  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000403  00000000  00000000  00002375  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <EEPROM_write_byte>:
#include "avr/delay.h"


// automatically set to atomically RW
void EEPROM_write_byte(uint8_t byte, uint16_t address) {
	cli();								// disable interrupts so we don't get interrupted between seting the master write and write
  96:	f8 94       	cli
	while(EECR & (1 << EEPE));			// wait until previous write is completed
  98:	f9 99       	sbic	0x1f, 1	; 31
  9a:	fe cf       	rjmp	.-4      	; 0x98 <EEPROM_write_byte+0x2>
	while(SELFPRGEN & (1 << SPMCSR));
  9c:	97 b7       	in	r25, 0x37	; 55
	
	EEAR = address;		// write address into address register
  9e:	72 bd       	out	0x22, r23	; 34
  a0:	61 bd       	out	0x21, r22	; 33
	EEDR = byte;		// write data into data register
  a2:	80 bd       	out	0x20, r24	; 32
	
	EECR |= (1 << EEMPE);	// set Master Write Enable
  a4:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1 << EEPE);	// within 4 clock cycles enable write
  a6:	f9 9a       	sbi	0x1f, 1	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	81 ee       	ldi	r24, 0xE1	; 225
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <EEPROM_write_byte+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <EEPROM_write_byte+0x1c>
  b2:	00 00       	nop
	_delay_ms(5);			// write takes about 3-4 ms, R.I.P run in peace
	sei();								// enable the interrupts
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <EEPROM_read_byte>:
}

uint8_t EEPROM_read_byte(uint16_t address) {
	cli();							// disable interrupts
  b8:	f8 94       	cli
	
	uint8_t byte = -1;
	
	while(EECR & (1 << EEPE));	// check that no one is writing data to EEPROM
  ba:	f9 99       	sbic	0x1f, 1	; 31
  bc:	fe cf       	rjmp	.-4      	; 0xba <EEPROM_read_byte+0x2>
	
	EEAR = address;					// set address to read from
  be:	92 bd       	out	0x22, r25	; 34
  c0:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);			// enable reading 
  c2:	f8 9a       	sbi	0x1f, 0	; 31
	
	byte = EEDR;
  c4:	80 b5       	in	r24, 0x20	; 32
	
	sei();							// enable interrupts
  c6:	78 94       	sei
	return byte;
  c8:	08 95       	ret

000000ca <output>:
 */ 
#include <avr/io.h>
#include "USART.h"
#include "EEPROM.h"

void output(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	16 2f       	mov	r17, r22
  d2:	d4 2f       	mov	r29, r20
  d4:	c2 2f       	mov	r28, r18
	USART_transmit_byte(a);
  d6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_transmit_byte>
	USART_transmit_byte(b);
  da:	81 2f       	mov	r24, r17
  dc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_transmit_byte>
	USART_transmit_byte(c);
  e0:	8d 2f       	mov	r24, r29
  e2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_transmit_byte>
	USART_transmit_byte(d);
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_transmit_byte>
	USART_transmit_byte('\n');
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_transmit_byte>
	USART_transmit_byte('\r');
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_transmit_byte>
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	08 95       	ret

00000100 <main>:

int main(void)
{
    USART_init();
 100:	0e 94 bf 00 	call	0x17e	; 0x17e <USART_init>
	uint8_t a = 'a';
	uint8_t b = 'b';
	uint8_t c = 'c';
	uint8_t d = 'd';
	
	USART_transmit_string("BEFORE:");
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_transmit_string>
	output(a, b, c, d);
 10c:	24 e6       	ldi	r18, 0x64	; 100
 10e:	43 e6       	ldi	r20, 0x63	; 99
 110:	62 e6       	ldi	r22, 0x62	; 98
 112:	81 e6       	ldi	r24, 0x61	; 97
 114:	0e 94 65 00 	call	0xca	; 0xca <output>
	
	EEPROM_write_byte(a, 0x00);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	81 e6       	ldi	r24, 0x61	; 97
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_write_byte>
	EEPROM_write_byte(b, 0x01);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	82 e6       	ldi	r24, 0x62	; 98
 128:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_write_byte>
	EEPROM_write_byte(c, 0x02);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	83 e6       	ldi	r24, 0x63	; 99
 132:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_write_byte>
	EEPROM_write_byte(d, 0x03);
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	84 e6       	ldi	r24, 0x64	; 100
 13c:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_write_byte>
	
	a = EEPROM_read_byte(0x03);
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 5c 00 	call	0xb8	; 0xb8 <EEPROM_read_byte>
 148:	c8 2f       	mov	r28, r24
	b = EEPROM_read_byte(0x02);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 5c 00 	call	0xb8	; 0xb8 <EEPROM_read_byte>
 152:	d8 2f       	mov	r29, r24
	c = EEPROM_read_byte(0x01);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 5c 00 	call	0xb8	; 0xb8 <EEPROM_read_byte>
 15c:	18 2f       	mov	r17, r24
	d = EEPROM_read_byte(0x00);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 5c 00 	call	0xb8	; 0xb8 <EEPROM_read_byte>
 166:	08 2f       	mov	r16, r24
	
	USART_transmit_string("AFTER:");
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_transmit_string>
	output(a, b, c, d);
 170:	20 2f       	mov	r18, r16
 172:	41 2f       	mov	r20, r17
 174:	6d 2f       	mov	r22, r29
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 65 00 	call	0xca	; 0xca <output>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x7c>

0000017e <USART_init>:
#include "USART.h"
#include <avr/io.h>

void USART_init()
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);		// enable TX and RX
 17e:	e1 ec       	ldi	r30, 0xC1	; 193
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 61       	ori	r24, 0x18	; 24
 186:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);     // 8 data bits, 1 stop bit
 188:	e2 ec       	ldi	r30, 0xC2	; 194
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8f 73       	andi	r24, 0x3F	; 63
 190:	80 83       	st	Z, r24
	
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 198:	08 95       	ret

0000019a <USART_is_ready>:
	// Set baud to 9600
	UBRR0H = 0;                        
	UBRR0L = 12;
	// Set baud to 9600
 19a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
 19e:	85 fb       	bst	r24, 5
 1a0:	88 27       	eor	r24, r24
 1a2:	80 f9       	bld	r24, 0
 1a4:	08 95       	ret

000001a6 <USART_transmit_byte>:
	UCSR0A |= (1 << U2X0);						// 2X speed
}
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24

 1aa:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_is_ready>
 1ae:	88 23       	and	r24, r24
 1b0:	e1 f3       	breq	.-8      	; 0x1aa <USART_transmit_byte+0x4>
void USART_transmit_byte(uint8_t byte) {
 1b2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!(UCSR0A & (1 <<UDRE0)));	// wait until buffer is empty
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <USART_transmit_string>:
	UDR0 = byte;
}
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29

void USART_transmit_string(char *data) {
	int i = 0;
 1c2:	61 15       	cp	r22, r1
 1c4:	71 05       	cpc	r23, r1
 1c6:	51 f0       	breq	.+20     	; 0x1dc <USART_transmit_string+0x22>
 1c8:	8c 01       	movw	r16, r24
 1ca:	ec 01       	movw	r28, r24
 1cc:	06 0f       	add	r16, r22
 1ce:	17 1f       	adc	r17, r23
	
 1d0:	89 91       	ld	r24, Y+
 1d2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_transmit_byte>
	while(!(UCSR0A & (1 <<UDRE0)));	// wait until buffer is empty
	UDR0 = byte;
}

void USART_transmit_string(char *data) {
	int i = 0;
 1d6:	c0 17       	cp	r28, r16
 1d8:	d1 07       	cpc	r29, r17
 1da:	d1 f7       	brne	.-12     	; 0x1d0 <USART_transmit_string+0x16>
	
	while(data[i]) {
		USART_transmit_byte(data[i]);
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
