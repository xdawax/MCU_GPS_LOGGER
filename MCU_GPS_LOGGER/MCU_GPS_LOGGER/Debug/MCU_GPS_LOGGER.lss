
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2b  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ea  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000481  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043c  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_structs>:
    {	
		
    }
	return 0;
}
void init_structs(gps_t *gps1, gps_t *gps2) {
  96:	dc 01       	movw	r26, r24
  98:	fb 01       	movw	r30, r22
		gps1->lattitude = 1;
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	4d 93       	st	X+, r20
  a4:	5d 93       	st	X+, r21
  a6:	6d 93       	st	X+, r22
  a8:	7c 93       	st	X, r23
  aa:	13 97       	sbiw	r26, 0x03	; 3
		gps1->longitude = 2;
  ac:	42 e0       	ldi	r20, 0x02	; 2
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	14 96       	adiw	r26, 0x04	; 4
  b6:	4d 93       	st	X+, r20
  b8:	5d 93       	st	X+, r21
  ba:	6d 93       	st	X+, r22
  bc:	7c 93       	st	X, r23
  be:	17 97       	sbiw	r26, 0x07	; 7
		gps1->month = 3;
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	18 96       	adiw	r26, 0x08	; 8
  c4:	8c 93       	st	X, r24
  c6:	18 97       	sbiw	r26, 0x08	; 8
		gps1->day = 4;
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	19 96       	adiw	r26, 0x09	; 9
  cc:	8c 93       	st	X, r24
  ce:	19 97       	sbiw	r26, 0x09	; 9
		gps1->hour = 5;
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	1a 96       	adiw	r26, 0x0a	; 10
  d4:	8c 93       	st	X, r24
  d6:	1a 97       	sbiw	r26, 0x0a	; 10
		gps1->minute = 6;
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	1b 96       	adiw	r26, 0x0b	; 11
  dc:	8c 93       	st	X, r24
		
		gps2->lattitude = 'a';
  de:	81 e6       	ldi	r24, 0x61	; 97
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	80 83       	st	Z, r24
  e8:	91 83       	std	Z+1, r25	; 0x01
  ea:	a2 83       	std	Z+2, r26	; 0x02
  ec:	b3 83       	std	Z+3, r27	; 0x03
		gps2->longitude = 'b';
  ee:	82 e6       	ldi	r24, 0x62	; 98
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	84 83       	std	Z+4, r24	; 0x04
  f8:	95 83       	std	Z+5, r25	; 0x05
  fa:	a6 83       	std	Z+6, r26	; 0x06
  fc:	b7 83       	std	Z+7, r27	; 0x07
		gps2->month = 'c';
  fe:	83 e6       	ldi	r24, 0x63	; 99
 100:	80 87       	std	Z+8, r24	; 0x08
		gps2->day = 'd';
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	81 87       	std	Z+9, r24	; 0x09
		gps2->hour = 'e';
 106:	85 e6       	ldi	r24, 0x65	; 101
 108:	82 87       	std	Z+10, r24	; 0x0a
		gps2->minute = 'f';
 10a:	86 e6       	ldi	r24, 0x66	; 102
 10c:	83 87       	std	Z+11, r24	; 0x0b
 10e:	08 95       	ret

00000110 <main>:
int main(void)
{
    gps_t *gps1 = NULL;
	gps_t *gps2 = NULL;
	
	USART_init();
 110:	0e 94 93 00 	call	0x126	; 0x126 <USART_init>
	USART_clear_putty();
 114:	0e 94 ac 00 	call	0x158	; 0x158 <USART_clear_putty>
	
	init_structs(gps1, gps2);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 4b 00 	call	0x96	; 0x96 <init_structs>
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x14>

00000126 <USART_init>:
	
	while (divisor > 1) {
		divisor = divisor / 10;
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 132:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 13c:	e0 ec       	ldi	r30, 0xC0	; 192
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <USART_transmit_byte>:
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	90 81       	ld	r25, Z
 14e:	95 ff       	sbrs	r25, 5
 150:	fd cf       	rjmp	.-6      	; 0x14c <USART_transmit_byte+0x4>
 152:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 156:	08 95       	ret

00000158 <USART_clear_putty>:

void USART_clear_putty() {
 158:	cf 93       	push	r28
 15a:	c4 e1       	ldi	r28, 0x14	; 20
	for (uint8_t i = 0; i < 20; i++)
	{
		USART_transmit_byte('\n');
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	0e 94 a4 00 	call	0x148	; 0x148 <USART_transmit_byte>
 162:	c1 50       	subi	r28, 0x01	; 1
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}

void USART_clear_putty() {
	for (uint8_t i = 0; i < 20; i++)
 164:	d9 f7       	brne	.-10     	; 0x15c <USART_clear_putty+0x4>
	{
		USART_transmit_byte('\n');
	}
	USART_transmit_byte('\r');
 166:	8d e0       	ldi	r24, 0x0D	; 13
 168:	0e 94 a4 00 	call	0x148	; 0x148 <USART_transmit_byte>
}
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
