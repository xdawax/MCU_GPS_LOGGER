
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00000326  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d40  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d0  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f7  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000442  00000000  00000000  000025e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8e:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <test_TX_word>:
    }
	return 0;
}

void test_TX_word() {
	USART_transmit_string("TESTING: test_TX_binary\n\r");
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	uint32_t a = 1892392;
	uint32_t b = 0;
	uint32_t c = 4294967295;
	uint32_t d = 19910;
	
	USART_transmit_string("Expected output 0001892392, got: ");
  9e:	8a e1       	ldi	r24, 0x1A	; 26
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_word(a);
  a6:	68 e2       	ldi	r22, 0x28	; 40
  a8:	70 ee       	ldi	r23, 0xE0	; 224
  aa:	8c e1       	ldi	r24, 0x1C	; 28
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_word>
	USART_transmit_string("\n\r");
  b2:	8f eb       	ldi	r24, 0xBF	; 191
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0000000000, got: ");
  ba:	8c e3       	ldi	r24, 0x3C	; 60
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_word(b);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	cb 01       	movw	r24, r22
  c8:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_word>
	USART_transmit_string("\n\r");
  cc:	8f eb       	ldi	r24, 0xBF	; 191
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
		
	USART_transmit_string("Expected output 4294967295, got: ");
  d4:	8e e5       	ldi	r24, 0x5E	; 94
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_word(c);
  dc:	6f ef       	ldi	r22, 0xFF	; 255
  de:	7f ef       	ldi	r23, 0xFF	; 255
  e0:	cb 01       	movw	r24, r22
  e2:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_word>
	USART_transmit_string("\n\r");
  e6:	8f eb       	ldi	r24, 0xBF	; 191
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0000019910, got: ");
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_word(d);
  f6:	66 ec       	ldi	r22, 0xC6	; 198
  f8:	7d e4       	ldi	r23, 0x4D	; 77
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_word>
	USART_transmit_string("\n\r");
 102:	8f eb       	ldi	r24, 0xBF	; 191
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	
	USART_transmit_string("TEST COMPLETED: test_TX_word\n\n\r");
 10a:	82 ea       	ldi	r24, 0xA2	; 162
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
 112:	08 95       	ret

00000114 <test_TX_binary>:
}

void test_TX_binary() {
	USART_transmit_string("TESTING: test_TX_binary\n\r");
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	uint8_t a = 0b11111111;
	uint8_t b = 0b00000000;
	uint8_t c = 0b01010101;
	uint8_t d = 0b10101010;
	
	USART_transmit_string("Expected output 0b11111111, got: ");
 11c:	82 ec       	ldi	r24, 0xC2	; 194
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_binary(a);
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_transmit_binary>
	USART_transmit_string("\n\r");
 12a:	8f eb       	ldi	r24, 0xBF	; 191
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b00000000, got ");
 132:	84 ee       	ldi	r24, 0xE4	; 228
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_binary(b);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_transmit_binary>
	USART_transmit_string("\n\r");
 140:	8f eb       	ldi	r24, 0xBF	; 191
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b01010101, got ");
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_binary(c);
 150:	85 e5       	ldi	r24, 0x55	; 85
 152:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_transmit_binary>
	USART_transmit_string("\n\r");
 156:	8f eb       	ldi	r24, 0xBF	; 191
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b10101010, got ");
 15e:	86 e2       	ldi	r24, 0x26	; 38
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	USART_transmit_binary(d);
 166:	8a ea       	ldi	r24, 0xAA	; 170
 168:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_transmit_binary>
	USART_transmit_string("\n\r");
 16c:	8f eb       	ldi	r24, 0xBF	; 191
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
	
	USART_transmit_string("TEST COMPLETED: test_TX_binary\n\n\r");
 174:	87 e4       	ldi	r24, 0x47	; 71
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
 17c:	08 95       	ret

0000017e <main>:
void test_TX_word();


int main(void)
{
    USART_init();
 17e:	0e 94 c8 00 	call	0x190	; 0x190 <USART_init>
	
	USART_clear_putty();
 182:	0e 94 63 01 	call	0x2c6	; 0x2c6 <USART_clear_putty>
	test_TX_binary();
 186:	0e 94 8a 00 	call	0x114	; 0x114 <test_TX_binary>
	test_TX_word();
 18a:	0e 94 4b 00 	call	0x96	; 0x96 <test_TX_word>
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x10>

00000190 <USART_init>:
		}
	}
}

void USART_transmit_digit(uint8_t byte) {
	USART_transmit_byte(byte + '0');
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 19c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1a0:	8c e0       	ldi	r24, 0x0C	; 12
 1a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1a6:	e0 ec       	ldi	r30, 0xC0	; 192
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <USART_transmit_byte>:
 1b2:	e0 ec       	ldi	r30, 0xC0	; 192
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	95 ff       	sbrs	r25, 5
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <USART_transmit_byte+0x4>
 1bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1c0:	08 95       	ret

000001c2 <USART_transmit_string>:
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	31 f0       	breq	.+12     	; 0x1da <USART_transmit_string+0x18>
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_transmit_byte>
 1d4:	89 91       	ld	r24, Y+
 1d6:	81 11       	cpse	r24, r1
 1d8:	fb cf       	rjmp	.-10     	; 0x1d0 <USART_transmit_string+0xe>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <USART_transmit_binary>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	08 2f       	mov	r16, r24
 1e8:	89 e6       	ldi	r24, 0x69	; 105
 1ea:	92 e0       	ldi	r25, 0x02	; 2
 1ec:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_transmit_string>
 1f0:	c7 e0       	ldi	r28, 0x07	; 7
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	98 01       	movw	r18, r16
 1f6:	0c 2e       	mov	r0, r28
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <USART_transmit_binary+0x1e>
 1fa:	35 95       	asr	r19
 1fc:	27 95       	ror	r18
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <USART_transmit_binary+0x1a>
 202:	20 ff       	sbrs	r18, 0
 204:	04 c0       	rjmp	.+8      	; 0x20e <USART_transmit_binary+0x2e>
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_transmit_byte>
 20c:	03 c0       	rjmp	.+6      	; 0x214 <USART_transmit_binary+0x34>
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_transmit_byte>
 214:	c1 50       	subi	r28, 0x01	; 1
 216:	70 f7       	brcc	.-36     	; 0x1f4 <USART_transmit_binary+0x14>
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <USART_transmit_word>:
}

void USART_transmit_word(uint32_t word) {
 220:	4f 92       	push	r4
 222:	5f 92       	push	r5
 224:	6f 92       	push	r6
 226:	7f 92       	push	r7
 228:	8f 92       	push	r8
 22a:	9f 92       	push	r9
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	2b 01       	movw	r4, r22
 23e:	3c 01       	movw	r6, r24
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	3a ec       	ldi	r19, 0xCA	; 202
 244:	4a e9       	ldi	r20, 0x9A	; 154
 246:	5b e3       	ldi	r21, 0x3B	; 59
 248:	0e 94 6f 01 	call	0x2de	; 0x2de <__udivmodsi4>
 24c:	80 e3       	ldi	r24, 0x30	; 48
 24e:	82 0f       	add	r24, r18
 250:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_transmit_byte>
 254:	c9 e0       	ldi	r28, 0x09	; 9
 256:	d0 e0       	ldi	r29, 0x00	; 0
void USART_transmit_digit(uint8_t byte) {
	USART_transmit_byte(byte + '0');
}

void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;
 258:	0f 2e       	mov	r0, r31
 25a:	c1 2c       	mov	r12, r1
 25c:	fa ec       	ldi	r31, 0xCA	; 202
 25e:	df 2e       	mov	r13, r31
 260:	fa e9       	ldi	r31, 0x9A	; 154
 262:	ef 2e       	mov	r14, r31
 264:	fb e3       	ldi	r31, 0x3B	; 59
 266:	ff 2e       	mov	r15, r31
 268:	f0 2d       	mov	r31, r0

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
		divisor = divisor / 10;
 26a:	0f 2e       	mov	r0, r31
 26c:	fa e0       	ldi	r31, 0x0A	; 10
 26e:	8f 2e       	mov	r8, r31
 270:	91 2c       	mov	r9, r1
 272:	a1 2c       	mov	r10, r1
 274:	b1 2c       	mov	r11, r1
 276:	f0 2d       	mov	r31, r0
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	a5 01       	movw	r20, r10
 27e:	94 01       	movw	r18, r8
 280:	0e 94 6f 01 	call	0x2de	; 0x2de <__udivmodsi4>
 284:	69 01       	movw	r12, r18
 286:	7a 01       	movw	r14, r20
		USART_transmit_byte(((word / divisor) % 10) + '0');
 288:	c3 01       	movw	r24, r6
 28a:	b2 01       	movw	r22, r4
 28c:	0e 94 6f 01 	call	0x2de	; 0x2de <__udivmodsi4>
 290:	ca 01       	movw	r24, r20
 292:	b9 01       	movw	r22, r18
 294:	a5 01       	movw	r20, r10
 296:	94 01       	movw	r18, r8
 298:	0e 94 6f 01 	call	0x2de	; 0x2de <__udivmodsi4>
 29c:	80 e3       	ldi	r24, 0x30	; 48
 29e:	86 0f       	add	r24, r22
 2a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_transmit_byte>
 2a4:	21 97       	sbiw	r28, 0x01	; 1
void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
 2a6:	41 f7       	brne	.-48     	; 0x278 <USART_transmit_word+0x58>
		divisor = divisor / 10;
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	bf 90       	pop	r11
 2b6:	af 90       	pop	r10
 2b8:	9f 90       	pop	r9
 2ba:	8f 90       	pop	r8
 2bc:	7f 90       	pop	r7
 2be:	6f 90       	pop	r6
 2c0:	5f 90       	pop	r5
 2c2:	4f 90       	pop	r4
 2c4:	08 95       	ret

000002c6 <USART_clear_putty>:

void USART_clear_putty() {
 2c6:	cf 93       	push	r28
 2c8:	c4 e1       	ldi	r28, 0x14	; 20
	for (uint8_t i = 0; i < 20; i++)
	{
		USART_transmit_byte('\n');
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_transmit_byte>
 2d0:	c1 50       	subi	r28, 0x01	; 1
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}

void USART_clear_putty() {
	for (uint8_t i = 0; i < 20; i++)
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <USART_clear_putty+0x4>
	{
		USART_transmit_byte('\n');
	}
	USART_transmit_byte('\r');
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_transmit_byte>
}
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <__udivmodsi4>:
 2de:	a1 e2       	ldi	r26, 0x21	; 33
 2e0:	1a 2e       	mov	r1, r26
 2e2:	aa 1b       	sub	r26, r26
 2e4:	bb 1b       	sub	r27, r27
 2e6:	fd 01       	movw	r30, r26
 2e8:	0d c0       	rjmp	.+26     	; 0x304 <__udivmodsi4_ep>

000002ea <__udivmodsi4_loop>:
 2ea:	aa 1f       	adc	r26, r26
 2ec:	bb 1f       	adc	r27, r27
 2ee:	ee 1f       	adc	r30, r30
 2f0:	ff 1f       	adc	r31, r31
 2f2:	a2 17       	cp	r26, r18
 2f4:	b3 07       	cpc	r27, r19
 2f6:	e4 07       	cpc	r30, r20
 2f8:	f5 07       	cpc	r31, r21
 2fa:	20 f0       	brcs	.+8      	; 0x304 <__udivmodsi4_ep>
 2fc:	a2 1b       	sub	r26, r18
 2fe:	b3 0b       	sbc	r27, r19
 300:	e4 0b       	sbc	r30, r20
 302:	f5 0b       	sbc	r31, r21

00000304 <__udivmodsi4_ep>:
 304:	66 1f       	adc	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	88 1f       	adc	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	1a 94       	dec	r1
 30e:	69 f7       	brne	.-38     	; 0x2ea <__udivmodsi4_loop>
 310:	60 95       	com	r22
 312:	70 95       	com	r23
 314:	80 95       	com	r24
 316:	90 95       	com	r25
 318:	9b 01       	movw	r18, r22
 31a:	ac 01       	movw	r20, r24
 31c:	bd 01       	movw	r22, r26
 31e:	cf 01       	movw	r24, r30
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
