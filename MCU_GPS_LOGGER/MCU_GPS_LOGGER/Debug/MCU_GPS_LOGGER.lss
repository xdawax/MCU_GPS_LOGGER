
MCU_GPS_LOGGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020a  00800100  0000039c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef8  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d0  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000562  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000451  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000442  00000000  00000000  00002945  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002d87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  8e:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <test_TX_word>:
    }
	return 0;
}

void test_TX_word() {
	USART_transmit_string("TESTING: test_TX_binary\n\r");
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	uint32_t a = 1892392;
	uint32_t b = 0;
	uint32_t c = 4294967295;
	uint32_t d = 19910;
	
	USART_transmit_string("Expected output 0001892392, got: ");
  9e:	8a e1       	ldi	r24, 0x1A	; 26
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_word(a);
  a6:	68 e2       	ldi	r22, 0x28	; 40
  a8:	70 ee       	ldi	r23, 0xE0	; 224
  aa:	8c e1       	ldi	r24, 0x1C	; 28
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4b 01 	call	0x296	; 0x296 <USART_transmit_word>
	USART_transmit_string("\n\r");
  b2:	8f eb       	ldi	r24, 0xBF	; 191
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0000000000, got: ");
  ba:	8c e3       	ldi	r24, 0x3C	; 60
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_word(b);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	cb 01       	movw	r24, r22
  c8:	0e 94 4b 01 	call	0x296	; 0x296 <USART_transmit_word>
	USART_transmit_string("\n\r");
  cc:	8f eb       	ldi	r24, 0xBF	; 191
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
		
	USART_transmit_string("Expected output 4294967295, got: ");
  d4:	8e e5       	ldi	r24, 0x5E	; 94
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_word(c);
  dc:	6f ef       	ldi	r22, 0xFF	; 255
  de:	7f ef       	ldi	r23, 0xFF	; 255
  e0:	cb 01       	movw	r24, r22
  e2:	0e 94 4b 01 	call	0x296	; 0x296 <USART_transmit_word>
	USART_transmit_string("\n\r");
  e6:	8f eb       	ldi	r24, 0xBF	; 191
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0000019910, got: ");
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_word(d);
  f6:	66 ec       	ldi	r22, 0xC6	; 198
  f8:	7d e4       	ldi	r23, 0x4D	; 77
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 4b 01 	call	0x296	; 0x296 <USART_transmit_word>
	USART_transmit_string("\n\r");
 102:	8f eb       	ldi	r24, 0xBF	; 191
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("TEST COMPLETED: test_TX_word\n\n\r");
 10a:	82 ea       	ldi	r24, 0xA2	; 162
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
 112:	08 95       	ret

00000114 <test_TX_digit>:
}

void test_TX_digit() {
	USART_transmit_string("TESTING: test_TX_digit\n\r");
 114:	82 ec       	ldi	r24, 0xC2	; 194
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	uint32_t a = 1;
	uint32_t b = 2;
	uint32_t c = 3;
	uint32_t d = 4;
	
	USART_transmit_string("Expected output 1, got: ");
 11c:	8b ed       	ldi	r24, 0xDB	; 219
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_digit(a);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 47 01 	call	0x28e	; 0x28e <USART_transmit_digit>
	USART_transmit_string("\n\r");
 12a:	8f eb       	ldi	r24, 0xBF	; 191
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 2, got: ");
 132:	84 ef       	ldi	r24, 0xF4	; 244
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_digit(b);
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 47 01 	call	0x28e	; 0x28e <USART_transmit_digit>
	USART_transmit_string("\n\r");
 140:	8f eb       	ldi	r24, 0xBF	; 191
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 3, got: ");
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_digit(c);
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 47 01 	call	0x28e	; 0x28e <USART_transmit_digit>
	USART_transmit_string("\n\r");
 156:	8f eb       	ldi	r24, 0xBF	; 191
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 4, got: ");
 15e:	86 e2       	ldi	r24, 0x26	; 38
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_digit(d);
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	0e 94 47 01 	call	0x28e	; 0x28e <USART_transmit_digit>
	USART_transmit_string("\n\r");
 16c:	8f eb       	ldi	r24, 0xBF	; 191
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("TEST COMPLETED: test_TX_digit\n\n\r");
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
 17c:	08 95       	ret

0000017e <test_TX_binary>:
}

void test_TX_binary() {
	USART_transmit_string("TESTING: test_TX_binary\n\r");
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	uint8_t a = 0b11111111;
	uint8_t b = 0b00000000;
	uint8_t c = 0b01010101;
	uint8_t d = 0b10101010;
	
	USART_transmit_string("Expected output 0b11111111, got: ");
 186:	80 e6       	ldi	r24, 0x60	; 96
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_binary(a);
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	0e 94 27 01 	call	0x24e	; 0x24e <USART_transmit_binary>
	USART_transmit_string("\n\r");
 194:	8f eb       	ldi	r24, 0xBF	; 191
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b00000000, got ");
 19c:	82 e8       	ldi	r24, 0x82	; 130
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_binary(b);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 27 01 	call	0x24e	; 0x24e <USART_transmit_binary>
	USART_transmit_string("\n\r");
 1aa:	8f eb       	ldi	r24, 0xBF	; 191
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b01010101, got ");
 1b2:	83 ea       	ldi	r24, 0xA3	; 163
 1b4:	92 e0       	ldi	r25, 0x02	; 2
 1b6:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_binary(c);
 1ba:	85 e5       	ldi	r24, 0x55	; 85
 1bc:	0e 94 27 01 	call	0x24e	; 0x24e <USART_transmit_binary>
	USART_transmit_string("\n\r");
 1c0:	8f eb       	ldi	r24, 0xBF	; 191
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("Expected output 0b10101010, got ");
 1c8:	84 ec       	ldi	r24, 0xC4	; 196
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	USART_transmit_binary(d);
 1d0:	8a ea       	ldi	r24, 0xAA	; 170
 1d2:	0e 94 27 01 	call	0x24e	; 0x24e <USART_transmit_binary>
	USART_transmit_string("\n\r");
 1d6:	8f eb       	ldi	r24, 0xBF	; 191
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	USART_transmit_string("TEST COMPLETED: test_TX_binary\n\n\r");
 1de:	85 ee       	ldi	r24, 0xE5	; 229
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
 1e6:	08 95       	ret

000001e8 <main>:
void test_TX_word();
void test_TX_digit();

int main(void)
{
    USART_init();
 1e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <USART_init>
	
	USART_clear_putty();
 1ec:	0e 94 9e 01 	call	0x33c	; 0x33c <USART_clear_putty>
	test_TX_binary();
 1f0:	0e 94 bf 00 	call	0x17e	; 0x17e <test_TX_binary>
	test_TX_word();
 1f4:	0e 94 4b 00 	call	0x96	; 0x96 <test_TX_word>
	test_TX_digit();
 1f8:	0e 94 8a 00 	call	0x114	; 0x114 <test_TX_digit>
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0x14>

000001fe <USART_init>:
			buf[i + 1] = '\0';
			break;
		}
	}
	
}
 1fe:	88 e1       	ldi	r24, 0x18	; 24
 200:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 20a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 20e:	8c e0       	ldi	r24, 0x0C	; 12
 210:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 214:	e0 ec       	ldi	r30, 0xC0	; 192
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <USART_transmit_byte>:
 220:	e0 ec       	ldi	r30, 0xC0	; 192
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	90 81       	ld	r25, Z
 226:	95 ff       	sbrs	r25, 5
 228:	fd cf       	rjmp	.-6      	; 0x224 <USART_transmit_byte+0x4>
 22a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 22e:	08 95       	ret

00000230 <USART_transmit_string>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	31 f0       	breq	.+12     	; 0x248 <USART_transmit_string+0x18>
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
 242:	89 91       	ld	r24, Y+
 244:	81 11       	cpse	r24, r1
 246:	fb cf       	rjmp	.-10     	; 0x23e <USART_transmit_string+0xe>
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <USART_transmit_binary>:

void USART_transmit_binary(uint8_t byte) {
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	08 2f       	mov	r16, r24
	USART_transmit_string("0b");
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	0e 94 18 01 	call	0x230	; 0x230 <USART_transmit_string>
	
	for (uint8_t i = BYTE - 1; i < 255; i--)
 25e:	c7 e0       	ldi	r28, 0x07	; 7
	{
		if (byte & (1 << i)) {
 260:	10 e0       	ldi	r17, 0x00	; 0
 262:	98 01       	movw	r18, r16
 264:	0c 2e       	mov	r0, r28
 266:	02 c0       	rjmp	.+4      	; 0x26c <USART_transmit_binary+0x1e>
 268:	35 95       	asr	r19
 26a:	27 95       	ror	r18
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <USART_transmit_binary+0x1a>
 270:	20 ff       	sbrs	r18, 0
 272:	04 c0       	rjmp	.+8      	; 0x27c <USART_transmit_binary+0x2e>
			USART_transmit_byte('1');
 274:	81 e3       	ldi	r24, 0x31	; 49
 276:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
 27a:	03 c0       	rjmp	.+6      	; 0x282 <USART_transmit_binary+0x34>
		} else {
			USART_transmit_byte('0');
 27c:	80 e3       	ldi	r24, 0x30	; 48
 27e:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
}

void USART_transmit_binary(uint8_t byte) {
	USART_transmit_string("0b");
	
	for (uint8_t i = BYTE - 1; i < 255; i--)
 282:	c1 50       	subi	r28, 0x01	; 1
 284:	70 f7       	brcc	.-36     	; 0x262 <USART_transmit_binary+0x14>
			USART_transmit_byte('1');
		} else {
			USART_transmit_byte('0');
		}
	}
}
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <USART_transmit_digit>:

void USART_transmit_digit(uint8_t byte) {
	USART_transmit_byte(byte + '0');
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
 294:	08 95       	ret

00000296 <USART_transmit_word>:
}

void USART_transmit_word(uint32_t word) {
 296:	4f 92       	push	r4
 298:	5f 92       	push	r5
 29a:	6f 92       	push	r6
 29c:	7f 92       	push	r7
 29e:	8f 92       	push	r8
 2a0:	9f 92       	push	r9
 2a2:	af 92       	push	r10
 2a4:	bf 92       	push	r11
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	2b 01       	movw	r4, r22
 2b4:	3c 01       	movw	r6, r24
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	3a ec       	ldi	r19, 0xCA	; 202
 2ba:	4a e9       	ldi	r20, 0x9A	; 154
 2bc:	5b e3       	ldi	r21, 0x3B	; 59
 2be:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	82 0f       	add	r24, r18
 2c6:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
 2ca:	c9 e0       	ldi	r28, 0x09	; 9
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
void USART_transmit_digit(uint8_t byte) {
	USART_transmit_byte(byte + '0');
}

void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;
 2ce:	0f 2e       	mov	r0, r31
 2d0:	c1 2c       	mov	r12, r1
 2d2:	fa ec       	ldi	r31, 0xCA	; 202
 2d4:	df 2e       	mov	r13, r31
 2d6:	fa e9       	ldi	r31, 0x9A	; 154
 2d8:	ef 2e       	mov	r14, r31
 2da:	fb e3       	ldi	r31, 0x3B	; 59
 2dc:	ff 2e       	mov	r15, r31
 2de:	f0 2d       	mov	r31, r0

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
		divisor = divisor / 10;
 2e0:	0f 2e       	mov	r0, r31
 2e2:	fa e0       	ldi	r31, 0x0A	; 10
 2e4:	8f 2e       	mov	r8, r31
 2e6:	91 2c       	mov	r9, r1
 2e8:	a1 2c       	mov	r10, r1
 2ea:	b1 2c       	mov	r11, r1
 2ec:	f0 2d       	mov	r31, r0
 2ee:	c7 01       	movw	r24, r14
 2f0:	b6 01       	movw	r22, r12
 2f2:	a5 01       	movw	r20, r10
 2f4:	94 01       	movw	r18, r8
 2f6:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
 2fa:	69 01       	movw	r12, r18
 2fc:	7a 01       	movw	r14, r20
		USART_transmit_byte(((word / divisor) % 10) + '0');
 2fe:	c3 01       	movw	r24, r6
 300:	b2 01       	movw	r22, r4
 302:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
 306:	ca 01       	movw	r24, r20
 308:	b9 01       	movw	r22, r18
 30a:	a5 01       	movw	r20, r10
 30c:	94 01       	movw	r18, r8
 30e:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
 312:	80 e3       	ldi	r24, 0x30	; 48
 314:	86 0f       	add	r24, r22
 316:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
 31a:	21 97       	sbiw	r28, 0x01	; 1
void USART_transmit_word(uint32_t word) {
	uint32_t divisor = 1000000000;

	USART_transmit_byte((word / divisor) + '0');
	
	while (divisor > 1) {
 31c:	41 f7       	brne	.-48     	; 0x2ee <USART_transmit_word+0x58>
		divisor = divisor / 10;
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	bf 90       	pop	r11
 32c:	af 90       	pop	r10
 32e:	9f 90       	pop	r9
 330:	8f 90       	pop	r8
 332:	7f 90       	pop	r7
 334:	6f 90       	pop	r6
 336:	5f 90       	pop	r5
 338:	4f 90       	pop	r4
 33a:	08 95       	ret

0000033c <USART_clear_putty>:

void USART_clear_putty() {
 33c:	cf 93       	push	r28
 33e:	c4 e1       	ldi	r28, 0x14	; 20
	for (uint8_t i = 0; i < 20; i++)
	{
		USART_transmit_byte('\n');
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
 346:	c1 50       	subi	r28, 0x01	; 1
		USART_transmit_byte(((word / divisor) % 10) + '0');
	}
}

void USART_clear_putty() {
	for (uint8_t i = 0; i < 20; i++)
 348:	d9 f7       	brne	.-10     	; 0x340 <USART_clear_putty+0x4>
	{
		USART_transmit_byte('\n');
	}
	USART_transmit_byte('\r');
 34a:	8d e0       	ldi	r24, 0x0D	; 13
 34c:	0e 94 10 01 	call	0x220	; 0x220 <USART_transmit_byte>
}
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <__udivmodsi4>:
 354:	a1 e2       	ldi	r26, 0x21	; 33
 356:	1a 2e       	mov	r1, r26
 358:	aa 1b       	sub	r26, r26
 35a:	bb 1b       	sub	r27, r27
 35c:	fd 01       	movw	r30, r26
 35e:	0d c0       	rjmp	.+26     	; 0x37a <__udivmodsi4_ep>

00000360 <__udivmodsi4_loop>:
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	ee 1f       	adc	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	a2 17       	cp	r26, r18
 36a:	b3 07       	cpc	r27, r19
 36c:	e4 07       	cpc	r30, r20
 36e:	f5 07       	cpc	r31, r21
 370:	20 f0       	brcs	.+8      	; 0x37a <__udivmodsi4_ep>
 372:	a2 1b       	sub	r26, r18
 374:	b3 0b       	sbc	r27, r19
 376:	e4 0b       	sbc	r30, r20
 378:	f5 0b       	sbc	r31, r21

0000037a <__udivmodsi4_ep>:
 37a:	66 1f       	adc	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	1a 94       	dec	r1
 384:	69 f7       	brne	.-38     	; 0x360 <__udivmodsi4_loop>
 386:	60 95       	com	r22
 388:	70 95       	com	r23
 38a:	80 95       	com	r24
 38c:	90 95       	com	r25
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	bd 01       	movw	r22, r26
 394:	cf 01       	movw	r24, r30
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
